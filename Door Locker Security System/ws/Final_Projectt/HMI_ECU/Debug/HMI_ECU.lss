
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00002dba  00002e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000e4  008000e4  00002ed2  2**0
                  ALLOC
  3 .stab         00002bec  00000000  00000000  00002ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000125d  00000000  00000000  00005ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b46b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__vector_7>
      20:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_8>
      24:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 06 	call	0xddc	; 0xddc <main>
      8a:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ec       	ldi	r26, 0xCE	; 206
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ec       	ldi	r24, 0xCE	; 206
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <take_password>:
uint8 flag_main=0;
uint8 i=0;
uint8 counters=0;
uint8 tick=0;
void take_password(uint8 *arr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6e 97       	sbiw	r28, 0x1e	; 30
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9e 8f       	std	Y+30, r25	; 0x1e
     b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	i=0;
     b5e:	10 92 fb 00 	sts	0x00FB, r1
	key=KEYPAD_getPressedKeys();
     b62:	0e 94 b1 14 	call	0x2962	; 0x2962 <KEYPAD_getPressedKeys>
     b66:	80 93 e4 00 	sts	0x00E4, r24
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a6 e9       	ldi	r26, 0x96	; 150
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	89 8f       	std	Y+25, r24	; 0x19
     b74:	9a 8f       	std	Y+26, r25	; 0x1a
     b76:	ab 8f       	std	Y+27, r26	; 0x1b
     b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	69 8d       	ldd	r22, Y+25	; 0x19
     b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a ef       	ldi	r20, 0xFA	; 250
     b88:	54 e4       	ldi	r21, 0x44	; 68
     b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8d 8b       	std	Y+21, r24	; 0x15
     b94:	9e 8b       	std	Y+22, r25	; 0x16
     b96:	af 8b       	std	Y+23, r26	; 0x17
     b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b9a:	6d 89       	ldd	r22, Y+21	; 0x15
     b9c:	7e 89       	ldd	r23, Y+22	; 0x16
     b9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ba0:	98 8d       	ldd	r25, Y+24	; 0x18
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <take_password+0x76>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9c 8b       	std	Y+20, r25	; 0x14
     bb8:	8b 8b       	std	Y+19, r24	; 0x13
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <take_password+0xf4>
	else if (__tmp > 65535)
     bbc:	6d 89       	ldd	r22, Y+21	; 0x15
     bbe:	7e 89       	ldd	r23, Y+22	; 0x16
     bc0:	8f 89       	ldd	r24, Y+23	; 0x17
     bc2:	98 8d       	ldd	r25, Y+24	; 0x18
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <take_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	69 8d       	ldd	r22, Y+25	; 0x19
     bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9c 8b       	std	Y+20, r25	; 0x14
     bfa:	8b 8b       	std	Y+19, r24	; 0x13
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <take_password+0xd6>
     bfe:	88 ec       	ldi	r24, 0xC8	; 200
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9a 8b       	std	Y+18, r25	; 0x12
     c04:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	89 89       	ldd	r24, Y+17	; 0x11
     c08:	9a 89       	ldd	r25, Y+18	; 0x12
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <take_password+0xc4>
     c0e:	9a 8b       	std	Y+18, r25	; 0x12
     c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8b 89       	ldd	r24, Y+19	; 0x13
     c14:	9c 89       	ldd	r25, Y+20	; 0x14
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8b 89       	ldd	r24, Y+19	; 0x13
     c1e:	9c 89       	ldd	r25, Y+20	; 0x14
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <take_password+0xb8>
     c24:	9f c0       	rjmp	.+318    	; 0xd64 <take_password+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6d 89       	ldd	r22, Y+21	; 0x15
     c28:	7e 89       	ldd	r23, Y+22	; 0x16
     c2a:	8f 89       	ldd	r24, Y+23	; 0x17
     c2c:	98 8d       	ldd	r25, Y+24	; 0x18
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9c 8b       	std	Y+20, r25	; 0x14
     c38:	8b 8b       	std	Y+19, r24	; 0x13
     c3a:	8b 89       	ldd	r24, Y+19	; 0x13
     c3c:	9c 89       	ldd	r25, Y+20	; 0x14
     c3e:	98 8b       	std	Y+16, r25	; 0x10
     c40:	8f 87       	std	Y+15, r24	; 0x0f
     c42:	8f 85       	ldd	r24, Y+15	; 0x0f
     c44:	98 89       	ldd	r25, Y+16	; 0x10
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <take_password+0x100>
     c4a:	98 8b       	std	Y+16, r25	; 0x10
     c4c:	8f 87       	std	Y+15, r24	; 0x0f
     c4e:	8a c0       	rjmp	.+276    	; 0xd64 <take_password+0x21e>
	_delay_ms(300);
	while(key != '=')
	{
		arr[i] = key;
     c50:	80 91 fb 00 	lds	r24, 0x00FB
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c5c:	fc 01       	movw	r30, r24
     c5e:	e2 0f       	add	r30, r18
     c60:	f3 1f       	adc	r31, r19
     c62:	80 91 e4 00 	lds	r24, 0x00E4
     c66:	80 83       	st	Z, r24
		LCD_DisplayCharacter('*');
     c68:	8a e2       	ldi	r24, 0x2A	; 42
     c6a:	0e 94 40 0c 	call	0x1880	; 0x1880 <LCD_DisplayCharacter>
		i++;
     c6e:	80 91 fb 00 	lds	r24, 0x00FB
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	80 93 fb 00 	sts	0x00FB, r24
		key=KEYPAD_getPressedKeys();
     c78:	0e 94 b1 14 	call	0x2962	; 0x2962 <KEYPAD_getPressedKeys>
     c7c:	80 93 e4 00 	sts	0x00E4, r24
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a6 e9       	ldi	r26, 0x96	; 150
     c86:	b3 e4       	ldi	r27, 0x43	; 67
     c88:	8b 87       	std	Y+11, r24	; 0x0b
     c8a:	9c 87       	std	Y+12, r25	; 0x0c
     c8c:	ad 87       	std	Y+13, r26	; 0x0d
     c8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c90:	6b 85       	ldd	r22, Y+11	; 0x0b
     c92:	7c 85       	ldd	r23, Y+12	; 0x0c
     c94:	8d 85       	ldd	r24, Y+13	; 0x0d
     c96:	9e 85       	ldd	r25, Y+14	; 0x0e
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	4a ef       	ldi	r20, 0xFA	; 250
     c9e:	54 e4       	ldi	r21, 0x44	; 68
     ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	8f 83       	std	Y+7, r24	; 0x07
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	a9 87       	std	Y+9, r26	; 0x09
     cae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb0:	6f 81       	ldd	r22, Y+7	; 0x07
     cb2:	78 85       	ldd	r23, Y+8	; 0x08
     cb4:	89 85       	ldd	r24, Y+9	; 0x09
     cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	2c f4       	brge	.+10     	; 0xcd2 <take_password+0x18c>
		__ticks = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <take_password+0x20a>
	else if (__tmp > 65535)
     cd2:	6f 81       	ldd	r22, Y+7	; 0x07
     cd4:	78 85       	ldd	r23, Y+8	; 0x08
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	57 e4       	ldi	r21, 0x47	; 71
     ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce6:	18 16       	cp	r1, r24
     ce8:	4c f5       	brge	.+82     	; 0xd3c <take_password+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cea:	6b 85       	ldd	r22, Y+11	; 0x0b
     cec:	7c 85       	ldd	r23, Y+12	; 0x0c
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <take_password+0x1ec>
     d14:	88 ec       	ldi	r24, 0xC8	; 200
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <take_password+0x1da>
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	9e 81       	ldd	r25, Y+6	; 0x06
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	69 f7       	brne	.-38     	; 0xd14 <take_password+0x1ce>
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <take_password+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3c:	6f 81       	ldd	r22, Y+7	; 0x07
     d3e:	78 85       	ldd	r23, Y+8	; 0x08
     d40:	89 85       	ldd	r24, Y+9	; 0x09
     d42:	9a 85       	ldd	r25, Y+10	; 0x0a
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <take_password+0x216>
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
void take_password(uint8 *arr)
{
	i=0;
	key=KEYPAD_getPressedKeys();
	_delay_ms(300);
	while(key != '=')
     d64:	80 91 e4 00 	lds	r24, 0x00E4
     d68:	8d 33       	cpi	r24, 0x3D	; 61
     d6a:	09 f0       	breq	.+2      	; 0xd6e <take_password+0x228>
     d6c:	71 cf       	rjmp	.-286    	; 0xc50 <take_password+0x10a>
		LCD_DisplayCharacter('*');
		i++;
		key=KEYPAD_getPressedKeys();
		_delay_ms(300);
	}
	arr[i]='#';
     d6e:	80 91 fb 00 	lds	r24, 0x00FB
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d78:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d7a:	fc 01       	movw	r30, r24
     d7c:	e2 0f       	add	r30, r18
     d7e:	f3 1f       	adc	r31, r19
     d80:	83 e2       	ldi	r24, 0x23	; 35
     d82:	80 83       	st	Z, r24
	arr[i+1]='\0';
     d84:	80 91 fb 00 	lds	r24, 0x00FB
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9c 01       	movw	r18, r24
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d94:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d96:	fc 01       	movw	r30, r24
     d98:	e2 0f       	add	r30, r18
     d9a:	f3 1f       	adc	r31, r19
     d9c:	10 82       	st	Z, r1

}
     d9e:	6e 96       	adiw	r28, 0x1e	; 30
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <block_lcd>:
void block_lcd(void) {
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	tick++;
     db8:	80 91 fd 00 	lds	r24, 0x00FD
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 fd 00 	sts	0x00FD, r24
	if (tick == 60) {
     dc2:	80 91 fd 00 	lds	r24, 0x00FD
     dc6:	8c 33       	cpi	r24, 0x3C	; 60
     dc8:	31 f4       	brne	.+12     	; 0xdd6 <block_lcd+0x26>
		LCD_ClearScreen();
     dca:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
		tick=0;
     dce:	10 92 fd 00 	sts	0x00FD, r1
		TIMER1_stopCount();
     dd2:	0e 94 24 10 	call	0x2048	; 0x2048 <TIMER1_stopCount>

	}
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <main>:
int main(void)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	c1 55       	subi	r28, 0x51	; 81
     de6:	d0 40       	sbci	r29, 0x00	; 0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
     df2:	af e5       	ldi	r26, 0x5F	; 95
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	ef e5       	ldi	r30, 0x5F	; 95
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 68       	ori	r24, 0x80	; 128
     dfe:	8c 93       	st	X, r24
	//timer1 enable
	LCD_INIT();
     e00:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <LCD_INIT>
	UART_ConfigType setup={bit8 ,disabled ,bit_1 , b96};
     e04:	9e 01       	movw	r18, r28
     e06:	27 5c       	subi	r18, 0xC7	; 199
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	2a 96       	adiw	r28, 0x0a	; 10
     e0c:	3f af       	std	Y+63, r19	; 0x3f
     e0e:	2e af       	std	Y+62, r18	; 0x3e
     e10:	2a 97       	sbiw	r28, 0x0a	; 10
     e12:	8c ed       	ldi	r24, 0xDC	; 220
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	2c 96       	adiw	r28, 0x0c	; 12
     e18:	9f af       	std	Y+63, r25	; 0x3f
     e1a:	8e af       	std	Y+62, r24	; 0x3e
     e1c:	2c 97       	sbiw	r28, 0x0c	; 12
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	2d 96       	adiw	r28, 0x0d	; 13
     e22:	9f af       	std	Y+63, r25	; 0x3f
     e24:	2d 97       	sbiw	r28, 0x0d	; 13
     e26:	2c 96       	adiw	r28, 0x0c	; 12
     e28:	ee ad       	ldd	r30, Y+62	; 0x3e
     e2a:	ff ad       	ldd	r31, Y+63	; 0x3f
     e2c:	2c 97       	sbiw	r28, 0x0c	; 12
     e2e:	00 80       	ld	r0, Z
     e30:	2c 96       	adiw	r28, 0x0c	; 12
     e32:	2e ad       	ldd	r18, Y+62	; 0x3e
     e34:	3f ad       	ldd	r19, Y+63	; 0x3f
     e36:	2c 97       	sbiw	r28, 0x0c	; 12
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	2c 96       	adiw	r28, 0x0c	; 12
     e3e:	3f af       	std	Y+63, r19	; 0x3f
     e40:	2e af       	std	Y+62, r18	; 0x3e
     e42:	2c 97       	sbiw	r28, 0x0c	; 12
     e44:	2a 96       	adiw	r28, 0x0a	; 10
     e46:	ee ad       	ldd	r30, Y+62	; 0x3e
     e48:	ff ad       	ldd	r31, Y+63	; 0x3f
     e4a:	2a 97       	sbiw	r28, 0x0a	; 10
     e4c:	00 82       	st	Z, r0
     e4e:	2a 96       	adiw	r28, 0x0a	; 10
     e50:	2e ad       	ldd	r18, Y+62	; 0x3e
     e52:	3f ad       	ldd	r19, Y+63	; 0x3f
     e54:	2a 97       	sbiw	r28, 0x0a	; 10
     e56:	2f 5f       	subi	r18, 0xFF	; 255
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	2a 96       	adiw	r28, 0x0a	; 10
     e5c:	3f af       	std	Y+63, r19	; 0x3f
     e5e:	2e af       	std	Y+62, r18	; 0x3e
     e60:	2a 97       	sbiw	r28, 0x0a	; 10
     e62:	2d 96       	adiw	r28, 0x0d	; 13
     e64:	3f ad       	ldd	r19, Y+63	; 0x3f
     e66:	2d 97       	sbiw	r28, 0x0d	; 13
     e68:	31 50       	subi	r19, 0x01	; 1
     e6a:	2d 96       	adiw	r28, 0x0d	; 13
     e6c:	3f af       	std	Y+63, r19	; 0x3f
     e6e:	2d 97       	sbiw	r28, 0x0d	; 13
     e70:	2d 96       	adiw	r28, 0x0d	; 13
     e72:	8f ad       	ldd	r24, Y+63	; 0x3f
     e74:	2d 97       	sbiw	r28, 0x0d	; 13
     e76:	88 23       	and	r24, r24
     e78:	b1 f6       	brne	.-84     	; 0xe26 <main+0x4a>
	UART_init(&setup);
     e7a:	ce 01       	movw	r24, r28
     e7c:	c9 96       	adiw	r24, 0x39	; 57
     e7e:	0e 94 2e 10 	call	0x205c	; 0x205c <UART_init>

	Timer1_ConfigType SET = {0, 7812, pre1024, ctc};
     e82:	fe 01       	movw	r30, r28
     e84:	e0 5c       	subi	r30, 0xC0	; 192
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	2f 96       	adiw	r28, 0x0f	; 15
     e8a:	ff af       	std	Y+63, r31	; 0x3f
     e8c:	ee af       	std	Y+62, r30	; 0x3e
     e8e:	2f 97       	sbiw	r28, 0x0f	; 15
     e90:	26 ed       	ldi	r18, 0xD6	; 214
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	61 96       	adiw	r28, 0x11	; 17
     e96:	3f af       	std	Y+63, r19	; 0x3f
     e98:	2e af       	std	Y+62, r18	; 0x3e
     e9a:	61 97       	sbiw	r28, 0x11	; 17
     e9c:	36 e0       	ldi	r19, 0x06	; 6
     e9e:	62 96       	adiw	r28, 0x12	; 18
     ea0:	3f af       	std	Y+63, r19	; 0x3f
     ea2:	62 97       	sbiw	r28, 0x12	; 18
     ea4:	61 96       	adiw	r28, 0x11	; 17
     ea6:	ee ad       	ldd	r30, Y+62	; 0x3e
     ea8:	ff ad       	ldd	r31, Y+63	; 0x3f
     eaa:	61 97       	sbiw	r28, 0x11	; 17
     eac:	00 80       	ld	r0, Z
     eae:	61 96       	adiw	r28, 0x11	; 17
     eb0:	2e ad       	ldd	r18, Y+62	; 0x3e
     eb2:	3f ad       	ldd	r19, Y+63	; 0x3f
     eb4:	61 97       	sbiw	r28, 0x11	; 17
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	61 96       	adiw	r28, 0x11	; 17
     ebc:	3f af       	std	Y+63, r19	; 0x3f
     ebe:	2e af       	std	Y+62, r18	; 0x3e
     ec0:	61 97       	sbiw	r28, 0x11	; 17
     ec2:	2f 96       	adiw	r28, 0x0f	; 15
     ec4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ec6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ec8:	2f 97       	sbiw	r28, 0x0f	; 15
     eca:	00 82       	st	Z, r0
     ecc:	2f 96       	adiw	r28, 0x0f	; 15
     ece:	2e ad       	ldd	r18, Y+62	; 0x3e
     ed0:	3f ad       	ldd	r19, Y+63	; 0x3f
     ed2:	2f 97       	sbiw	r28, 0x0f	; 15
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	2f 96       	adiw	r28, 0x0f	; 15
     eda:	3f af       	std	Y+63, r19	; 0x3f
     edc:	2e af       	std	Y+62, r18	; 0x3e
     ede:	2f 97       	sbiw	r28, 0x0f	; 15
     ee0:	62 96       	adiw	r28, 0x12	; 18
     ee2:	3f ad       	ldd	r19, Y+63	; 0x3f
     ee4:	62 97       	sbiw	r28, 0x12	; 18
     ee6:	31 50       	subi	r19, 0x01	; 1
     ee8:	62 96       	adiw	r28, 0x12	; 18
     eea:	3f af       	std	Y+63, r19	; 0x3f
     eec:	62 97       	sbiw	r28, 0x12	; 18
     eee:	62 96       	adiw	r28, 0x12	; 18
     ef0:	8f ad       	ldd	r24, Y+63	; 0x3f
     ef2:	62 97       	sbiw	r28, 0x12	; 18
     ef4:	88 23       	and	r24, r24
     ef6:	b1 f6       	brne	.-84     	; 0xea4 <main+0xc8>
	Timer1_init(&SET);
     ef8:	ce 01       	movw	r24, r28
     efa:	80 5c       	subi	r24, 0xC0	; 192
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <Timer1_init>

	dis_pass1();
     f02:	0e 94 34 11 	call	0x2268	; 0x2268 <dis_pass1>
	take_password(fpass);
     f06:	85 ee       	ldi	r24, 0xE5	; 229
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
	reenter_pass();
     f0e:	0e 94 45 11 	call	0x228a	; 0x228a <reenter_pass>
	take_password(spass);
     f12:	8c ee       	ldi	r24, 0xEC	; 236
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
	LCD_ClearScreen();
     f1a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>

	UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
     f1e:	80 e1       	ldi	r24, 0x10	; 16
     f20:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
	UART_Send_String(fpass);
     f24:	85 ee       	ldi	r24, 0xE5	; 229
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
	UART_Send_String(spass);
     f2c:	8c ee       	ldi	r24, 0xEC	; 236
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
     f34:	19 c0       	rjmp	.+50     	; 0xf68 <main+0x18c>
	while(UART_Receive_Byte()!=1)
	{
		dis_pass1();
     f36:	0e 94 34 11 	call	0x2268	; 0x2268 <dis_pass1>
		take_password(fpass);
     f3a:	85 ee       	ldi	r24, 0xE5	; 229
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
		reenter_pass();
     f42:	0e 94 45 11 	call	0x228a	; 0x228a <reenter_pass>
		take_password(spass);
     f46:	8c ee       	ldi	r24, 0xEC	; 236
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
		LCD_ClearScreen();
     f4e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
		/*LCD_displayStringRowColumn(0,0,fpass);
				LCD_displayStringRowColumn(1,0,spass);
				_delay_ms(3000);*/
		UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
     f52:	80 e1       	ldi	r24, 0x10	; 16
     f54:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
		UART_Send_String(fpass);
     f58:	85 ee       	ldi	r24, 0xE5	; 229
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
		//	_delay_ms(10);
		UART_Send_String(spass);
     f60:	8c ee       	ldi	r24, 0xEC	; 236
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
	LCD_ClearScreen();

	UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
	UART_Send_String(fpass);
	UART_Send_String(spass);
	while(UART_Receive_Byte()!=1)
     f68:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	19 f7       	brne	.-58     	; 0xf36 <main+0x15a>
		//	_delay_ms(10);
		UART_Send_String(spass);
	}
	while(1)
	{
		screen_door();
     f70:	0e 94 5e 11 	call	0x22bc	; 0x22bc <screen_door>
		key=KEYPAD_getPressedKeys();
     f74:	0e 94 b1 14 	call	0x2962	; 0x2962 <KEYPAD_getPressedKeys>
     f78:	80 93 e4 00 	sts	0x00E4, r24
		UART_Send_Byte(key);
     f7c:	80 91 e4 00 	lds	r24, 0x00E4
     f80:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
		switch(key)
     f84:	80 91 e4 00 	lds	r24, 0x00E4
     f88:	e8 2f       	mov	r30, r24
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	28 96       	adiw	r28, 0x08	; 8
     f8e:	ff af       	std	Y+63, r31	; 0x3f
     f90:	ee af       	std	Y+62, r30	; 0x3e
     f92:	28 97       	sbiw	r28, 0x08	; 8
     f94:	28 96       	adiw	r28, 0x08	; 8
     f96:	2e ad       	ldd	r18, Y+62	; 0x3e
     f98:	3f ad       	ldd	r19, Y+63	; 0x3f
     f9a:	28 97       	sbiw	r28, 0x08	; 8
     f9c:	2b 32       	cpi	r18, 0x2B	; 43
     f9e:	31 05       	cpc	r19, r1
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <main+0x1d8>
     fa2:	28 96       	adiw	r28, 0x08	; 8
     fa4:	8e ad       	ldd	r24, Y+62	; 0x3e
     fa6:	9f ad       	ldd	r25, Y+63	; 0x3f
     fa8:	28 97       	sbiw	r28, 0x08	; 8
     faa:	8d 32       	cpi	r24, 0x2D	; 45
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <main+0x1d6>
     fb0:	39 c1       	rjmp	.+626    	; 0x1224 <main+0x448>
     fb2:	de cf       	rjmp	.-68     	; 0xf70 <main+0x194>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a8 ec       	ldi	r26, 0xC8	; 200
     fba:	b2 e4       	ldi	r27, 0x42	; 66
     fbc:	8d ab       	std	Y+53, r24	; 0x35
     fbe:	9e ab       	std	Y+54, r25	; 0x36
     fc0:	af ab       	std	Y+55, r26	; 0x37
     fc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6d a9       	ldd	r22, Y+53	; 0x35
     fc6:	7e a9       	ldd	r23, Y+54	; 0x36
     fc8:	8f a9       	ldd	r24, Y+55	; 0x37
     fca:	98 ad       	ldd	r25, Y+56	; 0x38
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4a ef       	ldi	r20, 0xFA	; 250
     fd2:	54 e4       	ldi	r21, 0x44	; 68
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	89 ab       	std	Y+49, r24	; 0x31
     fde:	9a ab       	std	Y+50, r25	; 0x32
     fe0:	ab ab       	std	Y+51, r26	; 0x33
     fe2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fe4:	69 a9       	ldd	r22, Y+49	; 0x31
     fe6:	7a a9       	ldd	r23, Y+50	; 0x32
     fe8:	8b a9       	ldd	r24, Y+51	; 0x33
     fea:	9c a9       	ldd	r25, Y+52	; 0x34
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <main+0x22a>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	98 ab       	std	Y+48, r25	; 0x30
    1002:	8f a7       	std	Y+47, r24	; 0x2f
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <main+0x2a8>
	else if (__tmp > 65535)
    1006:	69 a9       	ldd	r22, Y+49	; 0x31
    1008:	7a a9       	ldd	r23, Y+50	; 0x32
    100a:	8b a9       	ldd	r24, Y+51	; 0x33
    100c:	9c a9       	ldd	r25, Y+52	; 0x34
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6d a9       	ldd	r22, Y+53	; 0x35
    1020:	7e a9       	ldd	r23, Y+54	; 0x36
    1022:	8f a9       	ldd	r24, Y+55	; 0x37
    1024:	98 ad       	ldd	r25, Y+56	; 0x38
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	98 ab       	std	Y+48, r25	; 0x30
    1044:	8f a7       	std	Y+47, r24	; 0x2f
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <main+0x28a>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9e a7       	std	Y+46, r25	; 0x2e
    104e:	8d a7       	std	Y+45, r24	; 0x2d
    1050:	8d a5       	ldd	r24, Y+45	; 0x2d
    1052:	9e a5       	ldd	r25, Y+46	; 0x2e
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <main+0x278>
    1058:	9e a7       	std	Y+46, r25	; 0x2e
    105a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8f a5       	ldd	r24, Y+47	; 0x2f
    105e:	98 a9       	ldd	r25, Y+48	; 0x30
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	98 ab       	std	Y+48, r25	; 0x30
    1064:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8f a5       	ldd	r24, Y+47	; 0x2f
    1068:	98 a9       	ldd	r25, Y+48	; 0x30
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <main+0x26c>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	69 a9       	ldd	r22, Y+49	; 0x31
    1072:	7a a9       	ldd	r23, Y+50	; 0x32
    1074:	8b a9       	ldd	r24, Y+51	; 0x33
    1076:	9c a9       	ldd	r25, Y+52	; 0x34
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	98 ab       	std	Y+48, r25	; 0x30
    1082:	8f a7       	std	Y+47, r24	; 0x2f
    1084:	8f a5       	ldd	r24, Y+47	; 0x2f
    1086:	98 a9       	ldd	r25, Y+48	; 0x30
    1088:	9c a7       	std	Y+44, r25	; 0x2c
    108a:	8b a7       	std	Y+43, r24	; 0x2b
    108c:	8b a5       	ldd	r24, Y+43	; 0x2b
    108e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <main+0x2b4>
    1094:	9c a7       	std	Y+44, r25	; 0x2c
    1096:	8b a7       	std	Y+43, r24	; 0x2b
		{
		case '+':
		{
			_delay_ms(100);
			UART_Send_Byte(key);
    1098:	80 91 e4 00 	lds	r24, 0x00E4
    109c:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
			key=0;
    10a0:	10 92 e4 00 	sts	0x00E4, r1
			dis_pass1();
    10a4:	0e 94 34 11 	call	0x2268	; 0x2268 <dis_pass1>
			take_password(thpass);
    10a8:	83 ef       	ldi	r24, 0xF3	; 243
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
			UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
    10b0:	80 e1       	ldi	r24, 0x10	; 16
    10b2:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
			UART_Send_String(thpass);//SENDING ARR3
    10b6:	83 ef       	ldi	r24, 0xF3	; 243
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
    10be:	92 c0       	rjmp	.+292    	; 0x11e4 <main+0x408>
			while(UART_Receive_Byte()!=1)
			{
				reenter_pass();
    10c0:	0e 94 45 11 	call	0x228a	; 0x228a <reenter_pass>
				counters++;
    10c4:	80 91 fc 00 	lds	r24, 0x00FC
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 93 fc 00 	sts	0x00FC, r24
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a8 ec       	ldi	r26, 0xC8	; 200
    10d4:	b2 e4       	ldi	r27, 0x42	; 66
    10d6:	8f a3       	std	Y+39, r24	; 0x27
    10d8:	98 a7       	std	Y+40, r25	; 0x28
    10da:	a9 a7       	std	Y+41, r26	; 0x29
    10dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10de:	6f a1       	ldd	r22, Y+39	; 0x27
    10e0:	78 a5       	ldd	r23, Y+40	; 0x28
    10e2:	89 a5       	ldd	r24, Y+41	; 0x29
    10e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a ef       	ldi	r20, 0xFA	; 250
    10ec:	54 e4       	ldi	r21, 0x44	; 68
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8b a3       	std	Y+35, r24	; 0x23
    10f8:	9c a3       	std	Y+36, r25	; 0x24
    10fa:	ad a3       	std	Y+37, r26	; 0x25
    10fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1100:	7c a1       	ldd	r23, Y+36	; 0x24
    1102:	8d a1       	ldd	r24, Y+37	; 0x25
    1104:	9e a1       	ldd	r25, Y+38	; 0x26
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1112:	88 23       	and	r24, r24
    1114:	2c f4       	brge	.+10     	; 0x1120 <main+0x344>
		__ticks = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9a a3       	std	Y+34, r25	; 0x22
    111c:	89 a3       	std	Y+33, r24	; 0x21
    111e:	3f c0       	rjmp	.+126    	; 0x119e <main+0x3c2>
	else if (__tmp > 65535)
    1120:	6b a1       	ldd	r22, Y+35	; 0x23
    1122:	7c a1       	ldd	r23, Y+36	; 0x24
    1124:	8d a1       	ldd	r24, Y+37	; 0x25
    1126:	9e a1       	ldd	r25, Y+38	; 0x26
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1134:	18 16       	cp	r1, r24
    1136:	4c f5       	brge	.+82     	; 0x118a <main+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1138:	6f a1       	ldd	r22, Y+39	; 0x27
    113a:	78 a5       	ldd	r23, Y+40	; 0x28
    113c:	89 a5       	ldd	r24, Y+41	; 0x29
    113e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9a a3       	std	Y+34, r25	; 0x22
    115e:	89 a3       	std	Y+33, r24	; 0x21
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <main+0x3a4>
    1162:	88 ec       	ldi	r24, 0xC8	; 200
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	98 a3       	std	Y+32, r25	; 0x20
    1168:	8f 8f       	std	Y+31, r24	; 0x1f
    116a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    116c:	98 a1       	ldd	r25, Y+32	; 0x20
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <main+0x392>
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	89 a1       	ldd	r24, Y+33	; 0x21
    1178:	9a a1       	ldd	r25, Y+34	; 0x22
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	9a a3       	std	Y+34, r25	; 0x22
    117e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	89 a1       	ldd	r24, Y+33	; 0x21
    1182:	9a a1       	ldd	r25, Y+34	; 0x22
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	69 f7       	brne	.-38     	; 0x1162 <main+0x386>
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <main+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118a:	6b a1       	ldd	r22, Y+35	; 0x23
    118c:	7c a1       	ldd	r23, Y+36	; 0x24
    118e:	8d a1       	ldd	r24, Y+37	; 0x25
    1190:	9e a1       	ldd	r25, Y+38	; 0x26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9a a3       	std	Y+34, r25	; 0x22
    119c:	89 a3       	std	Y+33, r24	; 0x21
    119e:	89 a1       	ldd	r24, Y+33	; 0x21
    11a0:	9a a1       	ldd	r25, Y+34	; 0x22
    11a2:	9e 8f       	std	Y+30, r25	; 0x1e
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
    11a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <main+0x3ce>
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(100);
				take_password(thpass);
    11b2:	83 ef       	ldi	r24, 0xF3	; 243
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
				if(counters==2)
    11ba:	80 91 fc 00 	lds	r24, 0x00FC
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	69 f4       	brne	.+26     	; 0x11dc <main+0x400>
				{

					LCD_ClearScreen();
    11c2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
					LCD_Displaystring("error");
    11c6:	80 e6       	ldi	r24, 0x60	; 96
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
					Timer1_AsetCallBack(block_lcd);
    11ce:	88 ed       	ldi	r24, 0xD8	; 216
    11d0:	96 e0       	ldi	r25, 0x06	; 6
    11d2:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Timer1_AsetCallBack>
					UART_Send_Byte(1);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
					//	flag_main=1;
					/*while(UART_Receive_Byte()!=1){}
					break;*/

				}
				UART_Send_String(thpass);//SENDING ARR3
    11dc:	83 ef       	ldi	r24, 0xF3	; 243
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
			key=0;
			dis_pass1();
			take_password(thpass);
			UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
			UART_Send_String(thpass);//SENDING ARR3
			while(UART_Receive_Byte()!=1)
    11e4:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	09 f0       	breq	.+2      	; 0x11ee <main+0x412>
    11ec:	69 cf       	rjmp	.-302    	; 0x10c0 <main+0x2e4>
					break;*/

				}
				UART_Send_String(thpass);//SENDING ARR3
			}
			if(counters!=2)
    11ee:	80 91 fc 00 	lds	r24, 0x00FC
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	a1 f0       	breq	.+40     	; 0x121e <main+0x442>
			{
				LCD_ClearScreen();
    11f6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
				LCD_Displaystring("door is opening");
    11fa:	86 e6       	ldi	r24, 0x66	; 102
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
				//	closing=UART_Receive_Byte();
				while(UART_Receive_Byte()!=1){}
    1202:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	e1 f7       	brne	.-8      	; 0x1202 <main+0x426>
				LCD_ClearScreen();
    120a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
				LCD_Displaystring("door is closing");
    120e:	86 e7       	ldi	r24, 0x76	; 118
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
				while(UART_Receive_Byte()!=1){}
    1216:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	e1 f7       	brne	.-8      	; 0x1216 <main+0x43a>
			}
			counters=0;
    121e:	10 92 fc 00 	sts	0x00FC, r1
    1222:	a6 ce       	rjmp	.-692    	; 0xf70 <main+0x194>

		}
		break;
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a8 ec       	ldi	r26, 0xC8	; 200
    122a:	b2 e4       	ldi	r27, 0x42	; 66
    122c:	89 8f       	std	Y+25, r24	; 0x19
    122e:	9a 8f       	std	Y+26, r25	; 0x1a
    1230:	ab 8f       	std	Y+27, r26	; 0x1b
    1232:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	69 8d       	ldd	r22, Y+25	; 0x19
    1236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8d 8b       	std	Y+21, r24	; 0x15
    124e:	9e 8b       	std	Y+22, r25	; 0x16
    1250:	af 8b       	std	Y+23, r26	; 0x17
    1252:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1254:	6d 89       	ldd	r22, Y+21	; 0x15
    1256:	7e 89       	ldd	r23, Y+22	; 0x16
    1258:	8f 89       	ldd	r24, Y+23	; 0x17
    125a:	98 8d       	ldd	r25, Y+24	; 0x18
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <main+0x49a>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9c 8b       	std	Y+20, r25	; 0x14
    1272:	8b 8b       	std	Y+19, r24	; 0x13
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <main+0x518>
	else if (__tmp > 65535)
    1276:	6d 89       	ldd	r22, Y+21	; 0x15
    1278:	7e 89       	ldd	r23, Y+22	; 0x16
    127a:	8f 89       	ldd	r24, Y+23	; 0x17
    127c:	98 8d       	ldd	r25, Y+24	; 0x18
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <main+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	69 8d       	ldd	r22, Y+25	; 0x19
    1290:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9c 8b       	std	Y+20, r25	; 0x14
    12b4:	8b 8b       	std	Y+19, r24	; 0x13
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <main+0x4fa>
    12b8:	88 ec       	ldi	r24, 0xC8	; 200
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9a 8b       	std	Y+18, r25	; 0x12
    12be:	89 8b       	std	Y+17, r24	; 0x11
    12c0:	89 89       	ldd	r24, Y+17	; 0x11
    12c2:	9a 89       	ldd	r25, Y+18	; 0x12
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <main+0x4e8>
    12c8:	9a 8b       	std	Y+18, r25	; 0x12
    12ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8b 89       	ldd	r24, Y+19	; 0x13
    12ce:	9c 89       	ldd	r25, Y+20	; 0x14
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9c 8b       	std	Y+20, r25	; 0x14
    12d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8b 89       	ldd	r24, Y+19	; 0x13
    12d8:	9c 89       	ldd	r25, Y+20	; 0x14
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <main+0x4dc>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <main+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	6d 89       	ldd	r22, Y+21	; 0x15
    12e2:	7e 89       	ldd	r23, Y+22	; 0x16
    12e4:	8f 89       	ldd	r24, Y+23	; 0x17
    12e6:	98 8d       	ldd	r25, Y+24	; 0x18
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9c 8b       	std	Y+20, r25	; 0x14
    12f2:	8b 8b       	std	Y+19, r24	; 0x13
    12f4:	8b 89       	ldd	r24, Y+19	; 0x13
    12f6:	9c 89       	ldd	r25, Y+20	; 0x14
    12f8:	98 8b       	std	Y+16, r25	; 0x10
    12fa:	8f 87       	std	Y+15, r24	; 0x0f
    12fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fe:	98 89       	ldd	r25, Y+16	; 0x10
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <main+0x524>
    1304:	98 8b       	std	Y+16, r25	; 0x10
    1306:	8f 87       	std	Y+15, r24	; 0x0f
		case'-':
		{
			_delay_ms(100);
			UART_Send_Byte(key);
    1308:	80 91 e4 00 	lds	r24, 0x00E4
    130c:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
			key=0;
    1310:	10 92 e4 00 	sts	0x00E4, r1
			dis_pass1();
    1314:	0e 94 34 11 	call	0x2268	; 0x2268 <dis_pass1>
			take_password(thpass);
    1318:	83 ef       	ldi	r24, 0xF3	; 243
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
			UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
    1320:	80 e1       	ldi	r24, 0x10	; 16
    1322:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
			UART_Send_String(thpass);//SENDING ARR3
    1326:	83 ef       	ldi	r24, 0xF3	; 243
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
    132e:	92 c0       	rjmp	.+292    	; 0x1454 <main+0x678>

			while(UART_Receive_Byte()!=1)
			{

				reenter_pass();
    1330:	0e 94 45 11 	call	0x228a	; 0x228a <reenter_pass>
				counters++;
    1334:	80 91 fc 00 	lds	r24, 0x00FC
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	80 93 fc 00 	sts	0x00FC, r24
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a8 ec       	ldi	r26, 0xC8	; 200
    1344:	b2 e4       	ldi	r27, 0x42	; 66
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	9c 87       	std	Y+12, r25	; 0x0c
    134a:	ad 87       	std	Y+13, r26	; 0x0d
    134c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1350:	7c 85       	ldd	r23, Y+12	; 0x0c
    1352:	8d 85       	ldd	r24, Y+13	; 0x0d
    1354:	9e 85       	ldd	r25, Y+14	; 0x0e
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4a ef       	ldi	r20, 0xFA	; 250
    135c:	54 e4       	ldi	r21, 0x44	; 68
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8f 83       	std	Y+7, r24	; 0x07
    1368:	98 87       	std	Y+8, r25	; 0x08
    136a:	a9 87       	std	Y+9, r26	; 0x09
    136c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1382:	88 23       	and	r24, r24
    1384:	2c f4       	brge	.+10     	; 0x1390 <main+0x5b4>
		__ticks = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	3f c0       	rjmp	.+126    	; 0x140e <main+0x632>
	else if (__tmp > 65535)
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	4f e7       	ldi	r20, 0x7F	; 127
    139e:	57 e4       	ldi	r21, 0x47	; 71
    13a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	4c f5       	brge	.+82     	; 0x13fa <main+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <main+0x614>
    13d2:	88 ec       	ldi	r24, 0xC8	; 200
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <main+0x602>
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f7       	brne	.-38     	; 0x13d2 <main+0x5f6>
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	6f 81       	ldd	r22, Y+7	; 0x07
    13fc:	78 85       	ldd	r23, Y+8	; 0x08
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <main+0x63e>
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(100);
				take_password(thpass);
    1422:	83 ef       	ldi	r24, 0xF3	; 243
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
				if(counters==2)
    142a:	80 91 fc 00 	lds	r24, 0x00FC
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	69 f4       	brne	.+26     	; 0x144c <main+0x670>
				{
					LCD_ClearScreen();
    1432:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
					LCD_Displaystring("error");
    1436:	80 e6       	ldi	r24, 0x60	; 96
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
					Timer1_AsetCallBack(block_lcd);
    143e:	88 ed       	ldi	r24, 0xD8	; 216
    1440:	96 e0       	ldi	r25, 0x06	; 6
    1442:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Timer1_AsetCallBack>
					UART_Send_Byte(1);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
				}

				UART_Send_String(thpass);//SENDING ARR3
    144c:	83 ef       	ldi	r24, 0xF3	; 243
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
			dis_pass1();
			take_password(thpass);
			UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
			UART_Send_String(thpass);//SENDING ARR3

			while(UART_Receive_Byte()!=1)
    1454:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	09 f0       	breq	.+2      	; 0x145e <main+0x682>
    145c:	69 cf       	rjmp	.-302    	; 0x1330 <main+0x554>

				UART_Send_String(thpass);//SENDING ARR3

			}

			if(counters!=2)
    145e:	80 91 fc 00 	lds	r24, 0x00FC
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	d9 f0       	breq	.+54     	; 0x149c <main+0x6c0>
			{
				LCD_ClearScreen();
    1466:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
				dis_pass1();
    146a:	0e 94 34 11 	call	0x2268	; 0x2268 <dis_pass1>
				take_password(fpass);
    146e:	85 ee       	ldi	r24, 0xE5	; 229
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
				reenter_pass();
    1476:	0e 94 45 11 	call	0x228a	; 0x228a <reenter_pass>
				take_password(spass);
    147a:	8c ee       	ldi	r24, 0xEC	; 236
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 a3 05 	call	0xb46	; 0xb46 <take_password>
				LCD_ClearScreen();
    1482:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
				UART_Send_Byte(MC1_READY);//DEACTIVATE POLLING
    1486:	80 e1       	ldi	r24, 0x10	; 16
    1488:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
				UART_Send_String(fpass);
    148c:	85 ee       	ldi	r24, 0xE5	; 229
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
				UART_Send_String(spass);
    1494:	8c ee       	ldi	r24, 0xEC	; 236
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 d5 10 	call	0x21aa	; 0x21aa <UART_Send_String>
			}
			counters=0;
    149c:	10 92 fc 00 	sts	0x00FC, r1
    14a0:	67 cd       	rjmp	.-1330   	; 0xf70 <main+0x194>

000014a2 <LCD_SendCommand>:
 *      Author: Ahmedmohamed
 */
#include <util/delay.h>
#include "LCD.h"
void LCD_SendCommand(uint8 command)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	e9 97       	sbiw	r28, 0x39	; 57
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);//RS=0
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e8       	ldi	r26, 0x80	; 128
    14c8:	bf e3       	ldi	r27, 0x3F	; 63
    14ca:	8d ab       	std	Y+53, r24	; 0x35
    14cc:	9e ab       	std	Y+54, r25	; 0x36
    14ce:	af ab       	std	Y+55, r26	; 0x37
    14d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	6d a9       	ldd	r22, Y+53	; 0x35
    14d4:	7e a9       	ldd	r23, Y+54	; 0x36
    14d6:	8f a9       	ldd	r24, Y+55	; 0x37
    14d8:	98 ad       	ldd	r25, Y+56	; 0x38
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a ef       	ldi	r20, 0xFA	; 250
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	89 ab       	std	Y+49, r24	; 0x31
    14ec:	9a ab       	std	Y+50, r25	; 0x32
    14ee:	ab ab       	std	Y+51, r26	; 0x33
    14f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14f2:	69 a9       	ldd	r22, Y+49	; 0x31
    14f4:	7a a9       	ldd	r23, Y+50	; 0x32
    14f6:	8b a9       	ldd	r24, Y+51	; 0x33
    14f8:	9c a9       	ldd	r25, Y+52	; 0x34
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <LCD_SendCommand+0x72>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	98 ab       	std	Y+48, r25	; 0x30
    1510:	8f a7       	std	Y+47, r24	; 0x2f
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    1514:	69 a9       	ldd	r22, Y+49	; 0x31
    1516:	7a a9       	ldd	r23, Y+50	; 0x32
    1518:	8b a9       	ldd	r24, Y+51	; 0x33
    151a:	9c a9       	ldd	r25, Y+52	; 0x34
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	6d a9       	ldd	r22, Y+53	; 0x35
    152e:	7e a9       	ldd	r23, Y+54	; 0x36
    1530:	8f a9       	ldd	r24, Y+55	; 0x37
    1532:	98 ad       	ldd	r25, Y+56	; 0x38
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	98 ab       	std	Y+48, r25	; 0x30
    1552:	8f a7       	std	Y+47, r24	; 0x2f
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <LCD_SendCommand+0xd2>
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e a7       	std	Y+46, r25	; 0x2e
    155c:	8d a7       	std	Y+45, r24	; 0x2d
    155e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1560:	9e a5       	ldd	r25, Y+46	; 0x2e
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <LCD_SendCommand+0xc0>
    1566:	9e a7       	std	Y+46, r25	; 0x2e
    1568:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	8f a5       	ldd	r24, Y+47	; 0x2f
    156c:	98 a9       	ldd	r25, Y+48	; 0x30
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	98 ab       	std	Y+48, r25	; 0x30
    1572:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	8f a5       	ldd	r24, Y+47	; 0x2f
    1576:	98 a9       	ldd	r25, Y+48	; 0x30
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f7       	brne	.-38     	; 0x1556 <LCD_SendCommand+0xb4>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	69 a9       	ldd	r22, Y+49	; 0x31
    1580:	7a a9       	ldd	r23, Y+50	; 0x32
    1582:	8b a9       	ldd	r24, Y+51	; 0x33
    1584:	9c a9       	ldd	r25, Y+52	; 0x34
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	98 ab       	std	Y+48, r25	; 0x30
    1590:	8f a7       	std	Y+47, r24	; 0x2f
    1592:	8f a5       	ldd	r24, Y+47	; 0x2f
    1594:	98 a9       	ldd	r25, Y+48	; 0x30
    1596:	9c a7       	std	Y+44, r25	; 0x2c
    1598:	8b a7       	std	Y+43, r24	; 0x2b
    159a:	8b a5       	ldd	r24, Y+43	; 0x2b
    159c:	9c a5       	ldd	r25, Y+44	; 0x2c
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <LCD_SendCommand+0xfc>
    15a2:	9c a7       	std	Y+44, r25	; 0x2c
    15a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);//E=1
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	41 e0       	ldi	r20, 0x01	; 1
    15ac:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e8       	ldi	r26, 0x80	; 128
    15b6:	bf e3       	ldi	r27, 0x3F	; 63
    15b8:	8f a3       	std	Y+39, r24	; 0x27
    15ba:	98 a7       	std	Y+40, r25	; 0x28
    15bc:	a9 a7       	std	Y+41, r26	; 0x29
    15be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	6f a1       	ldd	r22, Y+39	; 0x27
    15c2:	78 a5       	ldd	r23, Y+40	; 0x28
    15c4:	89 a5       	ldd	r24, Y+41	; 0x29
    15c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a ef       	ldi	r20, 0xFA	; 250
    15ce:	54 e4       	ldi	r21, 0x44	; 68
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	8b a3       	std	Y+35, r24	; 0x23
    15da:	9c a3       	std	Y+36, r25	; 0x24
    15dc:	ad a3       	std	Y+37, r26	; 0x25
    15de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15e0:	6b a1       	ldd	r22, Y+35	; 0x23
    15e2:	7c a1       	ldd	r23, Y+36	; 0x24
    15e4:	8d a1       	ldd	r24, Y+37	; 0x25
    15e6:	9e a1       	ldd	r25, Y+38	; 0x26
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	5f e3       	ldi	r21, 0x3F	; 63
    15f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	2c f4       	brge	.+10     	; 0x1602 <LCD_SendCommand+0x160>
		__ticks = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9a a3       	std	Y+34, r25	; 0x22
    15fe:	89 a3       	std	Y+33, r24	; 0x21
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    1602:	6b a1       	ldd	r22, Y+35	; 0x23
    1604:	7c a1       	ldd	r23, Y+36	; 0x24
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	4f e7       	ldi	r20, 0x7F	; 127
    1610:	57 e4       	ldi	r21, 0x47	; 71
    1612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1616:	18 16       	cp	r1, r24
    1618:	4c f5       	brge	.+82     	; 0x166c <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161a:	6f a1       	ldd	r22, Y+39	; 0x27
    161c:	78 a5       	ldd	r23, Y+40	; 0x28
    161e:	89 a5       	ldd	r24, Y+41	; 0x29
    1620:	9a a5       	ldd	r25, Y+42	; 0x2a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <LCD_SendCommand+0x1c0>
    1644:	88 ec       	ldi	r24, 0xC8	; 200
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	98 a3       	std	Y+32, r25	; 0x20
    164a:	8f 8f       	std	Y+31, r24	; 0x1f
    164c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164e:	98 a1       	ldd	r25, Y+32	; 0x20
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_SendCommand+0x1ae>
    1654:	98 a3       	std	Y+32, r25	; 0x20
    1656:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	9a a3       	std	Y+34, r25	; 0x22
    1660:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	89 a1       	ldd	r24, Y+33	; 0x21
    1664:	9a a1       	ldd	r25, Y+34	; 0x22
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f7       	brne	.-38     	; 0x1644 <LCD_SendCommand+0x1a2>
    166a:	14 c0       	rjmp	.+40     	; 0x1694 <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	6b a1       	ldd	r22, Y+35	; 0x23
    166e:	7c a1       	ldd	r23, Y+36	; 0x24
    1670:	8d a1       	ldd	r24, Y+37	; 0x25
    1672:	9e a1       	ldd	r25, Y+38	; 0x26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9a a3       	std	Y+34, r25	; 0x22
    167e:	89 a3       	std	Y+33, r24	; 0x21
    1680:	89 a1       	ldd	r24, Y+33	; 0x21
    1682:	9a a1       	ldd	r25, Y+34	; 0x22
    1684:	9e 8f       	std	Y+30, r25	; 0x1e
    1686:	8d 8f       	std	Y+29, r24	; 0x1d
    1688:	8d 8d       	ldd	r24, Y+29	; 0x1d
    168a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_SendCommand+0x1ea>
    1690:	9e 8f       	std	Y+30, r25	; 0x1e
    1692:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	69 ad       	ldd	r22, Y+57	; 0x39
    1698:	0e 94 28 14 	call	0x2850	; 0x2850 <GPIO_writePort>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e8       	ldi	r26, 0x80	; 128
    16a2:	bf e3       	ldi	r27, 0x3F	; 63
    16a4:	89 8f       	std	Y+25, r24	; 0x19
    16a6:	9a 8f       	std	Y+26, r25	; 0x1a
    16a8:	ab 8f       	std	Y+27, r26	; 0x1b
    16aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	69 8d       	ldd	r22, Y+25	; 0x19
    16ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8d 8b       	std	Y+21, r24	; 0x15
    16c6:	9e 8b       	std	Y+22, r25	; 0x16
    16c8:	af 8b       	std	Y+23, r26	; 0x17
    16ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16cc:	6d 89       	ldd	r22, Y+21	; 0x15
    16ce:	7e 89       	ldd	r23, Y+22	; 0x16
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <LCD_SendCommand+0x24c>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    16ee:	6d 89       	ldd	r22, Y+21	; 0x15
    16f0:	7e 89       	ldd	r23, Y+22	; 0x16
    16f2:	8f 89       	ldd	r24, Y+23	; 0x17
    16f4:	98 8d       	ldd	r25, Y+24	; 0x18
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	69 8d       	ldd	r22, Y+25	; 0x19
    1708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9c 8b       	std	Y+20, r25	; 0x14
    172c:	8b 8b       	std	Y+19, r24	; 0x13
    172e:	0f c0       	rjmp	.+30     	; 0x174e <LCD_SendCommand+0x2ac>
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9a 8b       	std	Y+18, r25	; 0x12
    1736:	89 8b       	std	Y+17, r24	; 0x11
    1738:	89 89       	ldd	r24, Y+17	; 0x11
    173a:	9a 89       	ldd	r25, Y+18	; 0x12
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_SendCommand+0x29a>
    1740:	9a 8b       	std	Y+18, r25	; 0x12
    1742:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8b 89       	ldd	r24, Y+19	; 0x13
    1746:	9c 89       	ldd	r25, Y+20	; 0x14
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9c 8b       	std	Y+20, r25	; 0x14
    174c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8b 89       	ldd	r24, Y+19	; 0x13
    1750:	9c 89       	ldd	r25, Y+20	; 0x14
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <LCD_SendCommand+0x28e>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	6d 89       	ldd	r22, Y+21	; 0x15
    175a:	7e 89       	ldd	r23, Y+22	; 0x16
    175c:	8f 89       	ldd	r24, Y+23	; 0x17
    175e:	98 8d       	ldd	r25, Y+24	; 0x18
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	98 8b       	std	Y+16, r25	; 0x10
    1772:	8f 87       	std	Y+15, r24	; 0x0f
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	98 89       	ldd	r25, Y+16	; 0x10
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_SendCommand+0x2d6>
    177c:	98 8b       	std	Y+16, r25	; 0x10
    177e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);//E=1
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e8       	ldi	r26, 0x80	; 128
    1790:	bf e3       	ldi	r27, 0x3F	; 63
    1792:	8b 87       	std	Y+11, r24	; 0x0b
    1794:	9c 87       	std	Y+12, r25	; 0x0c
    1796:	ad 87       	std	Y+13, r26	; 0x0d
    1798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6b 85       	ldd	r22, Y+11	; 0x0b
    179c:	7c 85       	ldd	r23, Y+12	; 0x0c
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8f 83       	std	Y+7, r24	; 0x07
    17b4:	98 87       	std	Y+8, r25	; 0x08
    17b6:	a9 87       	std	Y+9, r26	; 0x09
    17b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <LCD_SendCommand+0x33a>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	3f c0       	rjmp	.+126    	; 0x185a <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    17dc:	6f 81       	ldd	r22, Y+7	; 0x07
    17de:	78 85       	ldd	r23, Y+8	; 0x08
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	0f c0       	rjmp	.+30     	; 0x183c <LCD_SendCommand+0x39a>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_SendCommand+0x388>
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8d 81       	ldd	r24, Y+5	; 0x05
    183e:	9e 81       	ldd	r25, Y+6	; 0x06
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <LCD_SendCommand+0x37c>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_SendCommand+0x3c4>
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    186e:	e9 96       	adiw	r28, 0x39	; 57
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter(uint8 command)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	e9 97       	sbiw	r28, 0x39	; 57
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);//RS=0
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	8d ab       	std	Y+53, r24	; 0x35
    18aa:	9e ab       	std	Y+54, r25	; 0x36
    18ac:	af ab       	std	Y+55, r26	; 0x37
    18ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6d a9       	ldd	r22, Y+53	; 0x35
    18b2:	7e a9       	ldd	r23, Y+54	; 0x36
    18b4:	8f a9       	ldd	r24, Y+55	; 0x37
    18b6:	98 ad       	ldd	r25, Y+56	; 0x38
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a ef       	ldi	r20, 0xFA	; 250
    18be:	54 e4       	ldi	r21, 0x44	; 68
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	89 ab       	std	Y+49, r24	; 0x31
    18ca:	9a ab       	std	Y+50, r25	; 0x32
    18cc:	ab ab       	std	Y+51, r26	; 0x33
    18ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18d0:	69 a9       	ldd	r22, Y+49	; 0x31
    18d2:	7a a9       	ldd	r23, Y+50	; 0x32
    18d4:	8b a9       	ldd	r24, Y+51	; 0x33
    18d6:	9c a9       	ldd	r25, Y+52	; 0x34
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <LCD_DisplayCharacter+0x72>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	98 ab       	std	Y+48, r25	; 0x30
    18ee:	8f a7       	std	Y+47, r24	; 0x2f
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <LCD_DisplayCharacter+0xf0>
	else if (__tmp > 65535)
    18f2:	69 a9       	ldd	r22, Y+49	; 0x31
    18f4:	7a a9       	ldd	r23, Y+50	; 0x32
    18f6:	8b a9       	ldd	r24, Y+51	; 0x33
    18f8:	9c a9       	ldd	r25, Y+52	; 0x34
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <LCD_DisplayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6d a9       	ldd	r22, Y+53	; 0x35
    190c:	7e a9       	ldd	r23, Y+54	; 0x36
    190e:	8f a9       	ldd	r24, Y+55	; 0x37
    1910:	98 ad       	ldd	r25, Y+56	; 0x38
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	98 ab       	std	Y+48, r25	; 0x30
    1930:	8f a7       	std	Y+47, r24	; 0x2f
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <LCD_DisplayCharacter+0xd2>
    1934:	88 ec       	ldi	r24, 0xC8	; 200
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e a7       	std	Y+46, r25	; 0x2e
    193a:	8d a7       	std	Y+45, r24	; 0x2d
    193c:	8d a5       	ldd	r24, Y+45	; 0x2d
    193e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_DisplayCharacter+0xc0>
    1944:	9e a7       	std	Y+46, r25	; 0x2e
    1946:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	8f a5       	ldd	r24, Y+47	; 0x2f
    194a:	98 a9       	ldd	r25, Y+48	; 0x30
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <LCD_DisplayCharacter+0xb4>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <LCD_DisplayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	98 ab       	std	Y+48, r25	; 0x30
    196e:	8f a7       	std	Y+47, r24	; 0x2f
    1970:	8f a5       	ldd	r24, Y+47	; 0x2f
    1972:	98 a9       	ldd	r25, Y+48	; 0x30
    1974:	9c a7       	std	Y+44, r25	; 0x2c
    1976:	8b a7       	std	Y+43, r24	; 0x2b
    1978:	8b a5       	ldd	r24, Y+43	; 0x2b
    197a:	9c a5       	ldd	r25, Y+44	; 0x2c
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_DisplayCharacter+0xfc>
    1980:	9c a7       	std	Y+44, r25	; 0x2c
    1982:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);//E=1
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e8       	ldi	r26, 0x80	; 128
    1994:	bf e3       	ldi	r27, 0x3F	; 63
    1996:	8f a3       	std	Y+39, r24	; 0x27
    1998:	98 a7       	std	Y+40, r25	; 0x28
    199a:	a9 a7       	std	Y+41, r26	; 0x29
    199c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	6f a1       	ldd	r22, Y+39	; 0x27
    19a0:	78 a5       	ldd	r23, Y+40	; 0x28
    19a2:	89 a5       	ldd	r24, Y+41	; 0x29
    19a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	4a ef       	ldi	r20, 0xFA	; 250
    19ac:	54 e4       	ldi	r21, 0x44	; 68
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	8b a3       	std	Y+35, r24	; 0x23
    19b8:	9c a3       	std	Y+36, r25	; 0x24
    19ba:	ad a3       	std	Y+37, r26	; 0x25
    19bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19be:	6b a1       	ldd	r22, Y+35	; 0x23
    19c0:	7c a1       	ldd	r23, Y+36	; 0x24
    19c2:	8d a1       	ldd	r24, Y+37	; 0x25
    19c4:	9e a1       	ldd	r25, Y+38	; 0x26
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <LCD_DisplayCharacter+0x160>
		__ticks = 1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9a a3       	std	Y+34, r25	; 0x22
    19dc:	89 a3       	std	Y+33, r24	; 0x21
    19de:	3f c0       	rjmp	.+126    	; 0x1a5e <LCD_DisplayCharacter+0x1de>
	else if (__tmp > 65535)
    19e0:	6b a1       	ldd	r22, Y+35	; 0x23
    19e2:	7c a1       	ldd	r23, Y+36	; 0x24
    19e4:	8d a1       	ldd	r24, Y+37	; 0x25
    19e6:	9e a1       	ldd	r25, Y+38	; 0x26
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	4c f5       	brge	.+82     	; 0x1a4a <LCD_DisplayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f8:	6f a1       	ldd	r22, Y+39	; 0x27
    19fa:	78 a5       	ldd	r23, Y+40	; 0x28
    19fc:	89 a5       	ldd	r24, Y+41	; 0x29
    19fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9a a3       	std	Y+34, r25	; 0x22
    1a1e:	89 a3       	std	Y+33, r24	; 0x21
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <LCD_DisplayCharacter+0x1c0>
    1a22:	88 ec       	ldi	r24, 0xC8	; 200
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	98 a3       	std	Y+32, r25	; 0x20
    1a28:	8f 8f       	std	Y+31, r24	; 0x1f
    1a2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_DisplayCharacter+0x1ae>
    1a32:	98 a3       	std	Y+32, r25	; 0x20
    1a34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	89 a1       	ldd	r24, Y+33	; 0x21
    1a38:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	89 a1       	ldd	r24, Y+33	; 0x21
    1a42:	9a a1       	ldd	r25, Y+34	; 0x22
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <LCD_DisplayCharacter+0x1a2>
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <LCD_DisplayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a50:	9e a1       	ldd	r25, Y+38	; 0x26
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9a a3       	std	Y+34, r25	; 0x22
    1a5c:	89 a3       	std	Y+33, r24	; 0x21
    1a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a60:	9a a1       	ldd	r25, Y+34	; 0x22
    1a62:	9e 8f       	std	Y+30, r25	; 0x1e
    1a64:	8d 8f       	std	Y+29, r24	; 0x1d
    1a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_DisplayCharacter+0x1ea>
    1a6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a70:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	69 ad       	ldd	r22, Y+57	; 0x39
    1a76:	0e 94 28 14 	call	0x2850	; 0x2850 <GPIO_writePort>
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e8       	ldi	r26, 0x80	; 128
    1a80:	bf e3       	ldi	r27, 0x3F	; 63
    1a82:	89 8f       	std	Y+25, r24	; 0x19
    1a84:	9a 8f       	std	Y+26, r25	; 0x1a
    1a86:	ab 8f       	std	Y+27, r26	; 0x1b
    1a88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4a ef       	ldi	r20, 0xFA	; 250
    1a98:	54 e4       	ldi	r21, 0x44	; 68
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8d 8b       	std	Y+21, r24	; 0x15
    1aa4:	9e 8b       	std	Y+22, r25	; 0x16
    1aa6:	af 8b       	std	Y+23, r26	; 0x17
    1aa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1aac:	7e 89       	ldd	r23, Y+22	; 0x16
    1aae:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <LCD_DisplayCharacter+0x24c>
		__ticks = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9c 8b       	std	Y+20, r25	; 0x14
    1ac8:	8b 8b       	std	Y+19, r24	; 0x13
    1aca:	3f c0       	rjmp	.+126    	; 0x1b4a <LCD_DisplayCharacter+0x2ca>
	else if (__tmp > 65535)
    1acc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ace:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	4c f5       	brge	.+82     	; 0x1b36 <LCD_DisplayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e2       	ldi	r20, 0x20	; 32
    1af2:	51 e4       	ldi	r21, 0x41	; 65
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9c 8b       	std	Y+20, r25	; 0x14
    1b0a:	8b 8b       	std	Y+19, r24	; 0x13
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <LCD_DisplayCharacter+0x2ac>
    1b0e:	88 ec       	ldi	r24, 0xC8	; 200
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9a 8b       	std	Y+18, r25	; 0x12
    1b14:	89 8b       	std	Y+17, r24	; 0x11
    1b16:	89 89       	ldd	r24, Y+17	; 0x11
    1b18:	9a 89       	ldd	r25, Y+18	; 0x12
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_DisplayCharacter+0x29a>
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b22:	8b 89       	ldd	r24, Y+19	; 0x13
    1b24:	9c 89       	ldd	r25, Y+20	; 0x14
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	9c 8b       	std	Y+20, r25	; 0x14
    1b2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	69 f7       	brne	.-38     	; 0x1b0e <LCD_DisplayCharacter+0x28e>
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <LCD_DisplayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	6d 89       	ldd	r22, Y+21	; 0x15
    1b38:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9c 8b       	std	Y+20, r25	; 0x14
    1b48:	8b 8b       	std	Y+19, r24	; 0x13
    1b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4e:	98 8b       	std	Y+16, r25	; 0x10
    1b50:	8f 87       	std	Y+15, r24	; 0x0f
    1b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b54:	98 89       	ldd	r25, Y+16	; 0x10
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_DisplayCharacter+0x2d6>
    1b5a:	98 8b       	std	Y+16, r25	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);//E=1
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e8       	ldi	r26, 0x80	; 128
    1b6e:	bf e3       	ldi	r27, 0x3F	; 63
    1b70:	8b 87       	std	Y+11, r24	; 0x0b
    1b72:	9c 87       	std	Y+12, r25	; 0x0c
    1b74:	ad 87       	std	Y+13, r26	; 0x0d
    1b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8f 83       	std	Y+7, r24	; 0x07
    1b92:	98 87       	std	Y+8, r25	; 0x08
    1b94:	a9 87       	std	Y+9, r26	; 0x09
    1b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b98:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9a:	78 85       	ldd	r23, Y+8	; 0x08
    1b9c:	89 85       	ldd	r24, Y+9	; 0x09
    1b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_DisplayCharacter+0x33a>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_DisplayCharacter+0x3b8>
	else if (__tmp > 65535)
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_DisplayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9e 83       	std	Y+6, r25	; 0x06
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_DisplayCharacter+0x39a>
    1bfc:	88 ec       	ldi	r24, 0xC8	; 200
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_DisplayCharacter+0x388>
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_DisplayCharacter+0x37c>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_DisplayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_DisplayCharacter+0x3c4>
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);


}
    1c4c:	e9 96       	adiw	r28, 0x39	; 57
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <LCD_Displaystring>:
void LCD_Displaystring(char *string)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <LCD_Displaystring+0x6>
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	0a c0       	rjmp	.+20     	; 0x1c82 <LCD_Displaystring+0x24>

	while(*string!='\0')
	{
		LCD_DisplayCharacter(*string);
    1c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c70:	fa 81       	ldd	r31, Y+2	; 0x02
    1c72:	80 81       	ld	r24, Z
    1c74:	0e 94 40 0c 	call	0x1880	; 0x1880 <LCD_DisplayCharacter>
		string++;
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_Displaystring(char *string)
{

	while(*string!='\0')
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	80 81       	ld	r24, Z
    1c88:	88 23       	and	r24, r24
    1c8a:	89 f7       	brne	.-30     	; 0x1c6e <LCD_Displaystring+0x10>
		LCD_DisplayCharacter(*string);
		string++;
	}


}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <LCD_MoveCursor>:

void LCD_MoveCursor(uint8 row, uint8 col)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <LCD_MoveCursor+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <LCD_MoveCursor+0x8>
    1c9e:	0f 92       	push	r0
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 cursor;
	switch(row)
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	3d 83       	std	Y+5, r19	; 0x05
    1cb0:	2c 83       	std	Y+4, r18	; 0x04
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	91 05       	cpc	r25, r1
    1cba:	c1 f0       	breq	.+48     	; 0x1cec <LCD_MoveCursor+0x56>
    1cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_MoveCursor+0x3a>
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	61 f0       	breq	.+24     	; 0x1ce6 <LCD_MoveCursor+0x50>
    1cce:	19 c0       	rjmp	.+50     	; 0x1d02 <LCD_MoveCursor+0x6c>
    1cd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	69 f0       	breq	.+26     	; 0x1cf4 <LCD_MoveCursor+0x5e>
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <LCD_MoveCursor+0x66>
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <LCD_MoveCursor+0x6c>
	{
	case 0:
		cursor=col;
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	0b c0       	rjmp	.+22     	; 0x1d02 <LCD_MoveCursor+0x6c>
		break;
	case 1:
			cursor=col+0x40;
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	80 5c       	subi	r24, 0xC0	; 192
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <LCD_MoveCursor+0x6c>
			break;
		case 2:
			cursor=col+0x10;
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	80 5f       	subi	r24, 0xF0	; 240
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <LCD_MoveCursor+0x6c>
				break;
		case 3:
			cursor=col+0x50;
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	80 5b       	subi	r24, 0xB0	; 176
    1d00:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	LCD_SendCommand(cursor|LCD_SET_CURSOR_LOCATION);
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	80 68       	ori	r24, 0x80	; 128
    1d06:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_SendCommand>
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col,char *string)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <LCD_displayStringRowColumn+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <LCD_displayStringRowColumn+0x8>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	6a 83       	std	Y+2, r22	; 0x02
    1d2a:	5c 83       	std	Y+4, r21	; 0x04
    1d2c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveCursor(row,col);
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	6a 81       	ldd	r22, Y+2	; 0x02
    1d32:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LCD_MoveCursor>
	LCD_Displaystring(string);
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <LCD_IntegerToString>:


void LCD_IntegerToString(uint8 data)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	61 97       	sbiw	r28, 0x11	; 17
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    1d62:	89 89       	ldd	r24, Y+17	; 0x11
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9e 01       	movw	r18, r28
    1d6a:	2f 5f       	subi	r18, 0xFF	; 255
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	b9 01       	movw	r22, r18
    1d70:	4a e0       	ldi	r20, 0x0A	; 10
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <itoa>
	LCD_Displaystring(buffer);
    1d78:	ce 01       	movw	r24, r28
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
}
    1d80:	61 96       	adiw	r28, 0x11	; 17
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <LCD_INIT>:

void LCD_INIT(void)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT); /* PD4 Output Pin */
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	62 e0       	ldi	r22, 0x02	; 2
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT); /* PD5 Output Pin */
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT); /* All PORTC pins are o/p pins */
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	6f ef       	ldi	r22, 0xFF	; 255
    1db2:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <GPIO_setupPortDirection>
	LCD_SendCommand(0x38);//2LINES AND 5x8 MATRIX
    1db6:	88 e3       	ldi	r24, 0x38	; 56
    1db8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_SendCommand>
	LCD_SendCommand(0x0C);//DISPLAY ON ,CURSOR OFF
    1dbc:	8c e0       	ldi	r24, 0x0C	; 12
    1dbe:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_SendCommand>
	LCD_SendCommand(0x01);//CLEAR DISPLAY
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_SendCommand>

}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <LCD_ClearScreen>:
void LCD_ClearScreen()
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_SendCommand>
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <__vector_7>:
static volatile void (*A_callBackPtr)(void) = NULL_PTR;
static volatile void (*g_callBackPtrOvf)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
    1de2:	1f 92       	push	r1
    1de4:	0f 92       	push	r0
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	0f 92       	push	r0
    1dea:	11 24       	eor	r1, r1
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	ef 93       	push	r30
    1e02:	ff 93       	push	r31
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	if(A_callBackPtr != NULL_PTR)
    1e0c:	80 91 00 01 	lds	r24, 0x0100
    1e10:	90 91 01 01 	lds	r25, 0x0101
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	29 f0       	breq	.+10     	; 0x1e22 <__vector_7+0x40>
	{
		(*A_callBackPtr)();
    1e18:	e0 91 00 01 	lds	r30, 0x0100
    1e1c:	f0 91 01 01 	lds	r31, 0x0101
    1e20:	09 95       	icall
	}
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	ff 91       	pop	r31
    1e28:	ef 91       	pop	r30
    1e2a:	bf 91       	pop	r27
    1e2c:	af 91       	pop	r26
    1e2e:	9f 91       	pop	r25
    1e30:	8f 91       	pop	r24
    1e32:	7f 91       	pop	r23
    1e34:	6f 91       	pop	r22
    1e36:	5f 91       	pop	r21
    1e38:	4f 91       	pop	r20
    1e3a:	3f 91       	pop	r19
    1e3c:	2f 91       	pop	r18
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti

00001e48 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	2f 93       	push	r18
    1e54:	3f 93       	push	r19
    1e56:	4f 93       	push	r20
    1e58:	5f 93       	push	r21
    1e5a:	6f 93       	push	r22
    1e5c:	7f 93       	push	r23
    1e5e:	8f 93       	push	r24
    1e60:	9f 93       	push	r25
    1e62:	af 93       	push	r26
    1e64:	bf 93       	push	r27
    1e66:	ef 93       	push	r30
    1e68:	ff 93       	push	r31
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	if(B_callBackPtr != NULL_PTR)
    1e72:	80 91 fe 00 	lds	r24, 0x00FE
    1e76:	90 91 ff 00 	lds	r25, 0x00FF
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	29 f0       	breq	.+10     	; 0x1e88 <__vector_8+0x40>
	{
		(*B_callBackPtr)();
    1e7e:	e0 91 fe 00 	lds	r30, 0x00FE
    1e82:	f0 91 ff 00 	lds	r31, 0x00FF
    1e86:	09 95       	icall
	}
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	ff 91       	pop	r31
    1e8e:	ef 91       	pop	r30
    1e90:	bf 91       	pop	r27
    1e92:	af 91       	pop	r26
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	7f 91       	pop	r23
    1e9a:	6f 91       	pop	r22
    1e9c:	5f 91       	pop	r21
    1e9e:	4f 91       	pop	r20
    1ea0:	3f 91       	pop	r19
    1ea2:	2f 91       	pop	r18
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	2f 93       	push	r18
    1eba:	3f 93       	push	r19
    1ebc:	4f 93       	push	r20
    1ebe:	5f 93       	push	r21
    1ec0:	6f 93       	push	r22
    1ec2:	7f 93       	push	r23
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	af 93       	push	r26
    1eca:	bf 93       	push	r27
    1ecc:	ef 93       	push	r30
    1ece:	ff 93       	push	r31
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	if(B_callBackPtr != NULL_PTR)
    1ed8:	80 91 fe 00 	lds	r24, 0x00FE
    1edc:	90 91 ff 00 	lds	r25, 0x00FF
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	29 f0       	breq	.+10     	; 0x1eee <__vector_9+0x40>
	{
		(*g_callBackPtrOvf)();
    1ee4:	e0 91 02 01 	lds	r30, 0x0102
    1ee8:	f0 91 03 01 	lds	r31, 0x0103
    1eec:	09 95       	icall
	}
}
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	ff 91       	pop	r31
    1ef4:	ef 91       	pop	r30
    1ef6:	bf 91       	pop	r27
    1ef8:	af 91       	pop	r26
    1efa:	9f 91       	pop	r25
    1efc:	8f 91       	pop	r24
    1efe:	7f 91       	pop	r23
    1f00:	6f 91       	pop	r22
    1f02:	5f 91       	pop	r21
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	0f 90       	pop	r0
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	0f 90       	pop	r0
    1f10:	1f 90       	pop	r1
    1f12:	18 95       	reti

00001f14 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <Timer1_init+0x6>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	9b 83       	std	Y+3, r25	; 0x03
    1f22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 MODE=Config_Ptr->mode;
    1f24:	ea 81       	ldd	r30, Y+2	; 0x02
    1f26:	fb 81       	ldd	r31, Y+3	; 0x03
    1f28:	85 81       	ldd	r24, Z+5	; 0x05
    1f2a:	89 83       	std	Y+1, r24	; 0x01
		TCNT1=(Config_Ptr->initial_value);
    1f2c:	ac e4       	ldi	r26, 0x4C	; 76
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ea 81       	ldd	r30, Y+2	; 0x02
    1f32:	fb 81       	ldd	r31, Y+3	; 0x03
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	9c 93       	st	X, r25
    1f3c:	8e 93       	st	-X, r24
		TCCR1A|=(1<<FOC1A);
    1f3e:	af e4       	ldi	r26, 0x4F	; 79
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ef e4       	ldi	r30, 0x4F	; 79
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	88 60       	ori	r24, 0x08	; 8
    1f4a:	8c 93       	st	X, r24
		//TCCR1A=(1<<Config_Ptr->mode);
		//TCCR1B=(TCCR1B&0xE7)|((1<<Config_Ptr->mode)<<3);
	//	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode<<1)&0x08);
    1f4c:	ae e4       	ldi	r26, 0x4E	; 78
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ea 81       	ldd	r30, Y+2	; 0x02
    1f52:	fb 81       	ldd	r31, Y+3	; 0x03
    1f54:	84 81       	ldd	r24, Z+4	; 0x04
    1f56:	28 2f       	mov	r18, r24
    1f58:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5c:	85 81       	ldd	r24, Z+5	; 0x05
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	88 70       	andi	r24, 0x08	; 8
    1f68:	82 2b       	or	r24, r18
    1f6a:	8c 93       	st	X, r24

	if(MODE==Normal)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 23       	and	r24, r24
    1f70:	41 f4       	brne	.+16     	; 0x1f82 <Timer1_init+0x6e>
		{
			TIMSK |= (1<<TOIE1);
    1f72:	a9 e5       	ldi	r26, 0x59	; 89
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e9 e5       	ldi	r30, 0x59	; 89
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	84 60       	ori	r24, 0x04	; 4
    1f7e:	8c 93       	st	X, r24
    1f80:	13 c0       	rjmp	.+38     	; 0x1fa8 <Timer1_init+0x94>
		}

	else if(MODE==ctc)
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	84 30       	cpi	r24, 0x04	; 4
    1f86:	81 f4       	brne	.+32     	; 0x1fa8 <Timer1_init+0x94>
		{

			OCR1A=(Config_Ptr->compare_value);
    1f88:	aa e4       	ldi	r26, 0x4A	; 74
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	11 96       	adiw	r26, 0x01	; 1
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);
    1f9a:	a9 e5       	ldi	r26, 0x59	; 89
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e9 e5       	ldi	r30, 0x59	; 89
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 61       	ori	r24, 0x10	; 16
    1fa6:	8c 93       	st	X, r24
				TCCR1A=((1<<non_inverting)<<6);
			}


		}*/
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <Timer1_deInit>:
void Timer1_deInit(void)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1fbc:	ef e4       	ldi	r30, 0x4F	; 79
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	10 82       	st	Z, r1
	TCCR1B = 0;
    1fc2:	ee e4       	ldi	r30, 0x4E	; 78
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	10 82       	st	Z, r1
	TCNT1 = 0;
    1fc8:	ec e4       	ldi	r30, 0x4C	; 76
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	11 82       	std	Z+1, r1	; 0x01
    1fce:	10 82       	st	Z, r1
	ICR1 = 0;
    1fd0:	e6 e4       	ldi	r30, 0x46	; 70
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	11 82       	std	Z+1, r1	; 0x01
    1fd6:	10 82       	st	Z, r1
	A_callBackPtr = NULL_PTR;
    1fd8:	10 92 01 01 	sts	0x0101, r1
    1fdc:	10 92 00 01 	sts	0x0100, r1
	B_callBackPtr = NULL_PTR;
    1fe0:	10 92 ff 00 	sts	0x00FF, r1
    1fe4:	10 92 fe 00 	sts	0x00FE, r1

}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <Timer1_AsetCallBack>:
void Timer1_AsetCallBack(void(*a_ptr)(void))
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <Timer1_AsetCallBack+0x6>
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	A_callBackPtr = a_ptr;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	90 93 01 01 	sts	0x0101, r25
    2004:	80 93 00 01 	sts	0x0100, r24

}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <TIMER1_startCount>:
void TIMER1_startCount(Timer1_Prescaler prescaler)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= (1<<WGM12);
    201e:	ae e4       	ldi	r26, 0x4E	; 78
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ee e4       	ldi	r30, 0x4E	; 78
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	88 60       	ori	r24, 0x08	; 8
    202a:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0xF8)|(prescaler);
    202c:	ae e4       	ldi	r26, 0x4E	; 78
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ee e4       	ldi	r30, 0x4E	; 78
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	98 2f       	mov	r25, r24
    2038:	98 7f       	andi	r25, 0xF8	; 248
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	89 2b       	or	r24, r25
    203e:	8c 93       	st	X, r24

}
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <TIMER1_stopCount>:

void TIMER1_stopCount(void)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B =0;
    2050:	ee e4       	ldi	r30, 0x4E	; 78
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	10 82       	st	Z, r1
}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <UART_init>:
 */
#include<avr/io.h>
#include"common_macros.h"
#include"UART.h"
void UART_init(const UART_ConfigType * Config_Ptr)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <UART_init+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <UART_init+0x8>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    206c:	1a 82       	std	Y+2, r1	; 0x02
    206e:	19 82       	std	Y+1, r1	; 0x01
	UCSRA=(1<<U2X);//DOUBLE TRANSMITION SPEED
    2070:	eb e2       	ldi	r30, 0x2B	; 43
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);//TRANSMITTER ,RECIEVER ENABLED
    2078:	ea e2       	ldi	r30, 0x2A	; 42
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	88 e1       	ldi	r24, 0x18	; 24
    207e:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) ;
    2080:	e0 e4       	ldi	r30, 0x40	; 64
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 e8       	ldi	r24, 0x80	; 128
    2086:	80 83       	st	Z, r24
	//LOW HAKTEB FEHA 7AGA //LOW 5LETO B ZERO H5AZEN FEL UBRRH


	//UBRRH=0;//DEH B ZERO 3SHAN H5AZEN FEL URSEL
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    2088:	a0 e4       	ldi	r26, 0x40	; 64
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e0 e4       	ldi	r30, 0x40	; 64
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	28 2f       	mov	r18, r24
    2094:	29 7f       	andi	r18, 0xF9	; 249
    2096:	eb 81       	ldd	r30, Y+3	; 0x03
    2098:	fc 81       	ldd	r31, Y+4	; 0x04
    209a:	80 81       	ld	r24, Z
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	82 2b       	or	r24, r18
    20a6:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    20a8:	a0 e4       	ldi	r26, 0x40	; 64
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e0 e4       	ldi	r30, 0x40	; 64
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	2f 7c       	andi	r18, 0xCF	; 207
    20b6:	eb 81       	ldd	r30, Y+3	; 0x03
    20b8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ba:	81 81       	ldd	r24, Z+1	; 0x01
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	82 95       	swap	r24
    20c2:	92 95       	swap	r25
    20c4:	90 7f       	andi	r25, 0xF0	; 240
    20c6:	98 27       	eor	r25, r24
    20c8:	80 7f       	andi	r24, 0xF0	; 240
    20ca:	98 27       	eor	r25, r24
    20cc:	82 2b       	or	r24, r18
    20ce:	8c 93       	st	X, r24
	//UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<4);
	UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<4);
    20d0:	a0 e4       	ldi	r26, 0x40	; 64
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e0 e4       	ldi	r30, 0x40	; 64
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	28 2f       	mov	r18, r24
    20dc:	27 7f       	andi	r18, 0xF7	; 247
    20de:	eb 81       	ldd	r30, Y+3	; 0x03
    20e0:	fc 81       	ldd	r31, Y+4	; 0x04
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 95       	swap	r24
    20ea:	92 95       	swap	r25
    20ec:	90 7f       	andi	r25, 0xF0	; 240
    20ee:	98 27       	eor	r25, r24
    20f0:	80 7f       	andi	r24, 0xF0	; 240
    20f2:	98 27       	eor	r25, r24
    20f4:	82 2b       	or	r24, r18
    20f6:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    20f8:	eb 81       	ldd	r30, Y+3	; 0x03
    20fa:	fc 81       	ldd	r31, Y+4	; 0x04
    20fc:	83 81       	ldd	r24, Z+3	; 0x03
    20fe:	94 81       	ldd	r25, Z+4	; 0x04
    2100:	a5 81       	ldd	r26, Z+5	; 0x05
    2102:	b6 81       	ldd	r27, Z+6	; 0x06
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	aa 1f       	adc	r26, r26
    210a:	bb 1f       	adc	r27, r27
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	aa 1f       	adc	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	aa 1f       	adc	r26, r26
    211a:	bb 1f       	adc	r27, r27
    211c:	9c 01       	movw	r18, r24
    211e:	ad 01       	movw	r20, r26
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	92 e1       	ldi	r25, 0x12	; 18
    2124:	aa e7       	ldi	r26, 0x7A	; 122
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__udivmodsi4>
    2130:	da 01       	movw	r26, r20
    2132:	c9 01       	movw	r24, r18
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    213a:	e0 e4       	ldi	r30, 0x40	; 64
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	89 2f       	mov	r24, r25
    2144:	99 27       	eor	r25, r25
    2146:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2148:	e9 e2       	ldi	r30, 0x29	; 41
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	80 83       	st	Z, r24

}
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <UART_Receive_Byte>:
uint8 UART_Receive_Byte(void)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2166:	eb e2       	ldi	r30, 0x2B	; 43
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	88 23       	and	r24, r24
    216e:	dc f7       	brge	.-10     	; 0x2166 <UART_Receive_Byte+0x8>
	return UDR;//clear rxc ,read data f bysafar el flag 3shan hwa read only
    2170:	ec e2       	ldi	r30, 0x2C	; 44
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
}
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <UART_Send_Byte>:
void UART_Send_Byte(uint8 data)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));//1 when its empty
    2188:	eb e2       	ldi	r30, 0x2B	; 43
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	80 72       	andi	r24, 0x20	; 32
    2194:	90 70       	andi	r25, 0x00	; 0
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	b9 f3       	breq	.-18     	; 0x2188 <UART_Send_Byte+0xc>
	UDR=data;
    219a:	ec e2       	ldi	r30, 0x2C	; 44
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	80 83       	st	Z, r24
}
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <UART_Send_String>:
void UART_Send_String(uint8 *str)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <UART_Send_String+0x6>
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	0a c0       	rjmp	.+20     	; 0x21ce <UART_Send_String+0x24>
	while(*str!='\0')
	{
		UART_Send_Byte(*str);
    21ba:	e9 81       	ldd	r30, Y+1	; 0x01
    21bc:	fa 81       	ldd	r31, Y+2	; 0x02
    21be:	80 81       	ld	r24, Z
    21c0:	0e 94 be 10 	call	0x217c	; 0x217c <UART_Send_Byte>
		str++;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));//1 when its empty
	UDR=data;
}
void UART_Send_String(uint8 *str)
{
	while(*str!='\0')
    21ce:	e9 81       	ldd	r30, Y+1	; 0x01
    21d0:	fa 81       	ldd	r31, Y+2	; 0x02
    21d2:	80 81       	ld	r24, Z
    21d4:	88 23       	and	r24, r24
    21d6:	89 f7       	brne	.-30     	; 0x21ba <UART_Send_String+0x10>
	{
		UART_Send_Byte(*str);
		str++;
	}
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <UART_Receive_String>:
void UART_Receive_String(uint8 *str)
{
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <UART_Receive_String+0xa>
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	9b 83       	std	Y+3, r25	; 0x03
    21f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    21f6:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Receive_Byte();
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	9b 81       	ldd	r25, Y+3	; 0x03
    2202:	8c 01       	movw	r16, r24
    2204:	02 0f       	add	r16, r18
    2206:	13 1f       	adc	r17, r19
    2208:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
    220c:	f8 01       	movw	r30, r16
    220e:	80 83       	st	Z, r24
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <UART_Receive_String+0x4e>
	while(str[i]!='#')//my own NULL
	{
		i++;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Receive_Byte();
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	8c 01       	movw	r16, r24
    2224:	02 0f       	add	r16, r18
    2226:	13 1f       	adc	r17, r19
    2228:	0e 94 af 10 	call	0x215e	; 0x215e <UART_Receive_Byte>
    222c:	f8 01       	movw	r30, r16
    222e:	80 83       	st	Z, r24
}
void UART_Receive_String(uint8 *str)
{
	uint8 i=0;
	str[i]=UART_Receive_Byte();
	while(str[i]!='#')//my own NULL
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	9b 81       	ldd	r25, Y+3	; 0x03
    223a:	fc 01       	movw	r30, r24
    223c:	e2 0f       	add	r30, r18
    223e:	f3 1f       	adc	r31, r19
    2240:	80 81       	ld	r24, Z
    2242:	83 32       	cpi	r24, 0x23	; 35
    2244:	31 f7       	brne	.-52     	; 0x2212 <UART_Receive_String+0x30>
	{
		i++;
		str[i]=UART_Receive_Byte();
	}
	str[i]='\0';
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	9b 81       	ldd	r25, Y+3	; 0x03
    2250:	fc 01       	movw	r30, r24
    2252:	e2 0f       	add	r30, r18
    2254:	f3 1f       	adc	r31, r19
    2256:	10 82       	st	Z, r1
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	08 95       	ret

00002268 <dis_pass1>:
			break;
		}
	}
}*/
void dis_pass1(void)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    2270:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
	LCD_Displaystring("plz enter pass:");
    2274:	86 e8       	ldi	r24, 0x86	; 134
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
	LCD_MoveCursor(1,0);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LCD_MoveCursor>
}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <reenter_pass>:
void reenter_pass(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    2292:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
	LCD_Displaystring("plz renter the");
    2296:	86 e9       	ldi	r24, 0x96	; 150
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
	LCD_MoveCursor(1,0);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LCD_MoveCursor>
	LCD_Displaystring("same pass:");
    22a6:	85 ea       	ldi	r24, 0xA5	; 165
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
	LCD_MoveCursor(1,10);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	6a e0       	ldi	r22, 0x0A	; 10
    22b2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LCD_MoveCursor>
}
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <screen_door>:
void screen_door(void)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    22c4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <LCD_ClearScreen>
	LCD_Displaystring("+:open the door");
    22c8:	80 eb       	ldi	r24, 0xB0	; 176
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>
	LCD_MoveCursor(1,0);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LCD_MoveCursor>
	LCD_Displaystring("-:change pass");
    22d8:	80 ec       	ldi	r24, 0xC0	; 192
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_Displaystring>

}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <GPIO_setupPinDirection+0x6>
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <GPIO_setupPinDirection+0x8>
    22ee:	0f 92       	push	r0
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	6a 83       	std	Y+2, r22	; 0x02
    22f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	88 30       	cpi	r24, 0x08	; 8
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <GPIO_setupPinDirection+0x1c>
    2300:	d5 c0       	rjmp	.+426    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	84 30       	cpi	r24, 0x04	; 4
    2306:	08 f0       	brcs	.+2      	; 0x230a <GPIO_setupPinDirection+0x24>
    2308:	d1 c0       	rjmp	.+418    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3d 83       	std	Y+5, r19	; 0x05
    2312:	2c 83       	std	Y+4, r18	; 0x04
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	9d 81       	ldd	r25, Y+5	; 0x05
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	91 05       	cpc	r25, r1
    231c:	09 f4       	brne	.+2      	; 0x2320 <GPIO_setupPinDirection+0x3a>
    231e:	43 c0       	rjmp	.+134    	; 0x23a6 <GPIO_setupPinDirection+0xc0>
    2320:	2c 81       	ldd	r18, Y+4	; 0x04
    2322:	3d 81       	ldd	r19, Y+5	; 0x05
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	2c f4       	brge	.+10     	; 0x2334 <GPIO_setupPinDirection+0x4e>
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	71 f0       	breq	.+28     	; 0x234e <GPIO_setupPinDirection+0x68>
    2332:	bc c0       	rjmp	.+376    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
    2334:	2c 81       	ldd	r18, Y+4	; 0x04
    2336:	3d 81       	ldd	r19, Y+5	; 0x05
    2338:	22 30       	cpi	r18, 0x02	; 2
    233a:	31 05       	cpc	r19, r1
    233c:	09 f4       	brne	.+2      	; 0x2340 <GPIO_setupPinDirection+0x5a>
    233e:	5f c0       	rjmp	.+190    	; 0x23fe <GPIO_setupPinDirection+0x118>
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	9d 81       	ldd	r25, Y+5	; 0x05
    2344:	83 30       	cpi	r24, 0x03	; 3
    2346:	91 05       	cpc	r25, r1
    2348:	09 f4       	brne	.+2      	; 0x234c <GPIO_setupPinDirection+0x66>
    234a:	85 c0       	rjmp	.+266    	; 0x2456 <GPIO_setupPinDirection+0x170>
    234c:	af c0       	rjmp	.+350    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	a1 f4       	brne	.+40     	; 0x237c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2354:	aa e3       	ldi	r26, 0x3A	; 58
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ea e3       	ldi	r30, 0x3A	; 58
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 2e       	mov	r0, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <GPIO_setupPinDirection+0x8c>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <GPIO_setupPinDirection+0x88>
    2376:	84 2b       	or	r24, r20
    2378:	8c 93       	st	X, r24
    237a:	98 c0       	rjmp	.+304    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    237c:	aa e3       	ldi	r26, 0x3A	; 58
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	ea e3       	ldi	r30, 0x3A	; 58
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	48 2f       	mov	r20, r24
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 2e       	mov	r0, r18
    2394:	02 c0       	rjmp	.+4      	; 0x239a <GPIO_setupPinDirection+0xb4>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	0a 94       	dec	r0
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <GPIO_setupPinDirection+0xb0>
    239e:	80 95       	com	r24
    23a0:	84 23       	and	r24, r20
    23a2:	8c 93       	st	X, r24
    23a4:	83 c0       	rjmp	.+262    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	a1 f4       	brne	.+40     	; 0x23d4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    23ac:	a7 e3       	ldi	r26, 0x37	; 55
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e7 e3       	ldi	r30, 0x37	; 55
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	48 2f       	mov	r20, r24
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 2e       	mov	r0, r18
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <GPIO_setupPinDirection+0xe4>
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	0a 94       	dec	r0
    23cc:	e2 f7       	brpl	.-8      	; 0x23c6 <GPIO_setupPinDirection+0xe0>
    23ce:	84 2b       	or	r24, r20
    23d0:	8c 93       	st	X, r24
    23d2:	6c c0       	rjmp	.+216    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    23d4:	a7 e3       	ldi	r26, 0x37	; 55
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e7 e3       	ldi	r30, 0x37	; 55
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	48 2f       	mov	r20, r24
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	02 2e       	mov	r0, r18
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <GPIO_setupPinDirection+0x10c>
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	0a 94       	dec	r0
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <GPIO_setupPinDirection+0x108>
    23f6:	80 95       	com	r24
    23f8:	84 23       	and	r24, r20
    23fa:	8c 93       	st	X, r24
    23fc:	57 c0       	rjmp	.+174    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	a1 f4       	brne	.+40     	; 0x242c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2404:	a4 e3       	ldi	r26, 0x34	; 52
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e4 e3       	ldi	r30, 0x34	; 52
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	48 2f       	mov	r20, r24
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 2e       	mov	r0, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <GPIO_setupPinDirection+0x13c>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	0a 94       	dec	r0
    2424:	e2 f7       	brpl	.-8      	; 0x241e <GPIO_setupPinDirection+0x138>
    2426:	84 2b       	or	r24, r20
    2428:	8c 93       	st	X, r24
    242a:	40 c0       	rjmp	.+128    	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    242c:	a4 e3       	ldi	r26, 0x34	; 52
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e4 e3       	ldi	r30, 0x34	; 52
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 2e       	mov	r0, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <GPIO_setupPinDirection+0x164>
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	0a 94       	dec	r0
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <GPIO_setupPinDirection+0x160>
    244e:	80 95       	com	r24
    2450:	84 23       	and	r24, r20
    2452:	8c 93       	st	X, r24
    2454:	2b c0       	rjmp	.+86     	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	a1 f4       	brne	.+40     	; 0x2484 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    245c:	a1 e3       	ldi	r26, 0x31	; 49
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e1 e3       	ldi	r30, 0x31	; 49
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	48 2f       	mov	r20, r24
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <GPIO_setupPinDirection+0x194>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <GPIO_setupPinDirection+0x190>
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2484:	a1 e3       	ldi	r26, 0x31	; 49
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e1 e3       	ldi	r30, 0x31	; 49
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <GPIO_setupPinDirection+0x1bc>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <GPIO_setupPinDirection+0x1b8>
    24a6:	80 95       	com	r24
    24a8:	84 23       	and	r24, r20
    24aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <GPIO_writePin+0x6>
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <GPIO_writePin+0x8>
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	6a 83       	std	Y+2, r22	; 0x02
    24ce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	88 30       	cpi	r24, 0x08	; 8
    24d4:	08 f0       	brcs	.+2      	; 0x24d8 <GPIO_writePin+0x1c>
    24d6:	d5 c0       	rjmp	.+426    	; 0x2682 <GPIO_writePin+0x1c6>
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	84 30       	cpi	r24, 0x04	; 4
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <GPIO_writePin+0x24>
    24de:	d1 c0       	rjmp	.+418    	; 0x2682 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	3d 83       	std	Y+5, r19	; 0x05
    24e8:	2c 83       	std	Y+4, r18	; 0x04
    24ea:	8c 81       	ldd	r24, Y+4	; 0x04
    24ec:	9d 81       	ldd	r25, Y+5	; 0x05
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	91 05       	cpc	r25, r1
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <GPIO_writePin+0x3a>
    24f4:	43 c0       	rjmp	.+134    	; 0x257c <GPIO_writePin+0xc0>
    24f6:	2c 81       	ldd	r18, Y+4	; 0x04
    24f8:	3d 81       	ldd	r19, Y+5	; 0x05
    24fa:	22 30       	cpi	r18, 0x02	; 2
    24fc:	31 05       	cpc	r19, r1
    24fe:	2c f4       	brge	.+10     	; 0x250a <GPIO_writePin+0x4e>
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	9d 81       	ldd	r25, Y+5	; 0x05
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	71 f0       	breq	.+28     	; 0x2524 <GPIO_writePin+0x68>
    2508:	bc c0       	rjmp	.+376    	; 0x2682 <GPIO_writePin+0x1c6>
    250a:	2c 81       	ldd	r18, Y+4	; 0x04
    250c:	3d 81       	ldd	r19, Y+5	; 0x05
    250e:	22 30       	cpi	r18, 0x02	; 2
    2510:	31 05       	cpc	r19, r1
    2512:	09 f4       	brne	.+2      	; 0x2516 <GPIO_writePin+0x5a>
    2514:	5f c0       	rjmp	.+190    	; 0x25d4 <GPIO_writePin+0x118>
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	9d 81       	ldd	r25, Y+5	; 0x05
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	91 05       	cpc	r25, r1
    251e:	09 f4       	brne	.+2      	; 0x2522 <GPIO_writePin+0x66>
    2520:	85 c0       	rjmp	.+266    	; 0x262c <GPIO_writePin+0x170>
    2522:	af c0       	rjmp	.+350    	; 0x2682 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	81 30       	cpi	r24, 0x01	; 1
    2528:	a1 f4       	brne	.+40     	; 0x2552 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    252a:	ab e3       	ldi	r26, 0x3B	; 59
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e3       	ldi	r30, 0x3B	; 59
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	48 2f       	mov	r20, r24
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	02 2e       	mov	r0, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <GPIO_writePin+0x8c>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	0a 94       	dec	r0
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <GPIO_writePin+0x88>
    254c:	84 2b       	or	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	98 c0       	rjmp	.+304    	; 0x2682 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2552:	ab e3       	ldi	r26, 0x3B	; 59
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	eb e3       	ldi	r30, 0x3B	; 59
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <GPIO_writePin+0xb4>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <GPIO_writePin+0xb0>
    2574:	80 95       	com	r24
    2576:	84 23       	and	r24, r20
    2578:	8c 93       	st	X, r24
    257a:	83 c0       	rjmp	.+262    	; 0x2682 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	a1 f4       	brne	.+40     	; 0x25aa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2582:	a8 e3       	ldi	r26, 0x38	; 56
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e8 e3       	ldi	r30, 0x38	; 56
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <GPIO_writePin+0xe4>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <GPIO_writePin+0xe0>
    25a4:	84 2b       	or	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	6c c0       	rjmp	.+216    	; 0x2682 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    25aa:	a8 e3       	ldi	r26, 0x38	; 56
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e8 e3       	ldi	r30, 0x38	; 56
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <GPIO_writePin+0x10c>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <GPIO_writePin+0x108>
    25cc:	80 95       	com	r24
    25ce:	84 23       	and	r24, r20
    25d0:	8c 93       	st	X, r24
    25d2:	57 c0       	rjmp	.+174    	; 0x2682 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	a1 f4       	brne	.+40     	; 0x2602 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    25da:	a5 e3       	ldi	r26, 0x35	; 53
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e5 e3       	ldi	r30, 0x35	; 53
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	48 2f       	mov	r20, r24
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 2e       	mov	r0, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <GPIO_writePin+0x13c>
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0a 94       	dec	r0
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <GPIO_writePin+0x138>
    25fc:	84 2b       	or	r24, r20
    25fe:	8c 93       	st	X, r24
    2600:	40 c0       	rjmp	.+128    	; 0x2682 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2602:	a5 e3       	ldi	r26, 0x35	; 53
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e5 e3       	ldi	r30, 0x35	; 53
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	48 2f       	mov	r20, r24
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	02 2e       	mov	r0, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <GPIO_writePin+0x164>
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	0a 94       	dec	r0
    2622:	e2 f7       	brpl	.-8      	; 0x261c <GPIO_writePin+0x160>
    2624:	80 95       	com	r24
    2626:	84 23       	and	r24, r20
    2628:	8c 93       	st	X, r24
    262a:	2b c0       	rjmp	.+86     	; 0x2682 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	81 30       	cpi	r24, 0x01	; 1
    2630:	a1 f4       	brne	.+40     	; 0x265a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2632:	a2 e3       	ldi	r26, 0x32	; 50
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e2 e3       	ldi	r30, 0x32	; 50
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	48 2f       	mov	r20, r24
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	02 2e       	mov	r0, r18
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <GPIO_writePin+0x194>
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	0a 94       	dec	r0
    2652:	e2 f7       	brpl	.-8      	; 0x264c <GPIO_writePin+0x190>
    2654:	84 2b       	or	r24, r20
    2656:	8c 93       	st	X, r24
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    265a:	a2 e3       	ldi	r26, 0x32	; 50
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e2 e3       	ldi	r30, 0x32	; 50
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	48 2f       	mov	r20, r24
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 2e       	mov	r0, r18
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <GPIO_writePin+0x1bc>
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	0a 94       	dec	r0
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <GPIO_writePin+0x1b8>
    267c:	80 95       	com	r24
    267e:	84 23       	and	r24, r20
    2680:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <GPIO_readPin+0x6>
    2698:	00 d0       	rcall	.+0      	; 0x269a <GPIO_readPin+0x8>
    269a:	0f 92       	push	r0
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	8a 83       	std	Y+2, r24	; 0x02
    26a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    26a4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <GPIO_readPin+0x1c>
    26ac:	84 c0       	rjmp	.+264    	; 0x27b6 <GPIO_readPin+0x124>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	08 f0       	brcs	.+2      	; 0x26b6 <GPIO_readPin+0x24>
    26b4:	80 c0       	rjmp	.+256    	; 0x27b6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	3d 83       	std	Y+5, r19	; 0x05
    26be:	2c 83       	std	Y+4, r18	; 0x04
    26c0:	4c 81       	ldd	r20, Y+4	; 0x04
    26c2:	5d 81       	ldd	r21, Y+5	; 0x05
    26c4:	41 30       	cpi	r20, 0x01	; 1
    26c6:	51 05       	cpc	r21, r1
    26c8:	79 f1       	breq	.+94     	; 0x2728 <GPIO_readPin+0x96>
    26ca:	8c 81       	ldd	r24, Y+4	; 0x04
    26cc:	9d 81       	ldd	r25, Y+5	; 0x05
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	91 05       	cpc	r25, r1
    26d2:	34 f4       	brge	.+12     	; 0x26e0 <GPIO_readPin+0x4e>
    26d4:	2c 81       	ldd	r18, Y+4	; 0x04
    26d6:	3d 81       	ldd	r19, Y+5	; 0x05
    26d8:	21 15       	cp	r18, r1
    26da:	31 05       	cpc	r19, r1
    26dc:	69 f0       	breq	.+26     	; 0x26f8 <GPIO_readPin+0x66>
    26de:	6b c0       	rjmp	.+214    	; 0x27b6 <GPIO_readPin+0x124>
    26e0:	4c 81       	ldd	r20, Y+4	; 0x04
    26e2:	5d 81       	ldd	r21, Y+5	; 0x05
    26e4:	42 30       	cpi	r20, 0x02	; 2
    26e6:	51 05       	cpc	r21, r1
    26e8:	b9 f1       	breq	.+110    	; 0x2758 <GPIO_readPin+0xc6>
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	91 05       	cpc	r25, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <GPIO_readPin+0x64>
    26f4:	49 c0       	rjmp	.+146    	; 0x2788 <GPIO_readPin+0xf6>
    26f6:	5f c0       	rjmp	.+190    	; 0x27b6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    26f8:	e9 e3       	ldi	r30, 0x39	; 57
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a9 01       	movw	r20, r18
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <GPIO_readPin+0x7e>
    270c:	55 95       	asr	r21
    270e:	47 95       	ror	r20
    2710:	8a 95       	dec	r24
    2712:	e2 f7       	brpl	.-8      	; 0x270c <GPIO_readPin+0x7a>
    2714:	ca 01       	movw	r24, r20
    2716:	81 70       	andi	r24, 0x01	; 1
    2718:	90 70       	andi	r25, 0x00	; 0
    271a:	88 23       	and	r24, r24
    271c:	19 f0       	breq	.+6      	; 0x2724 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	49 c0       	rjmp	.+146    	; 0x27b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	47 c0       	rjmp	.+142    	; 0x27b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2728:	e6 e3       	ldi	r30, 0x36	; 54
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a9 01       	movw	r20, r18
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <GPIO_readPin+0xae>
    273c:	55 95       	asr	r21
    273e:	47 95       	ror	r20
    2740:	8a 95       	dec	r24
    2742:	e2 f7       	brpl	.-8      	; 0x273c <GPIO_readPin+0xaa>
    2744:	ca 01       	movw	r24, r20
    2746:	81 70       	andi	r24, 0x01	; 1
    2748:	90 70       	andi	r25, 0x00	; 0
    274a:	88 23       	and	r24, r24
    274c:	19 f0       	breq	.+6      	; 0x2754 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	31 c0       	rjmp	.+98     	; 0x27b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2754:	19 82       	std	Y+1, r1	; 0x01
    2756:	2f c0       	rjmp	.+94     	; 0x27b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2758:	e3 e3       	ldi	r30, 0x33	; 51
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	88 2f       	mov	r24, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a9 01       	movw	r20, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <GPIO_readPin+0xde>
    276c:	55 95       	asr	r21
    276e:	47 95       	ror	r20
    2770:	8a 95       	dec	r24
    2772:	e2 f7       	brpl	.-8      	; 0x276c <GPIO_readPin+0xda>
    2774:	ca 01       	movw	r24, r20
    2776:	81 70       	andi	r24, 0x01	; 1
    2778:	90 70       	andi	r25, 0x00	; 0
    277a:	88 23       	and	r24, r24
    277c:	19 f0       	breq	.+6      	; 0x2784 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	19 c0       	rjmp	.+50     	; 0x27b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2784:	19 82       	std	Y+1, r1	; 0x01
    2786:	17 c0       	rjmp	.+46     	; 0x27b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2788:	e0 e3       	ldi	r30, 0x30	; 48
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <GPIO_readPin+0x10e>
    279c:	55 95       	asr	r21
    279e:	47 95       	ror	r20
    27a0:	8a 95       	dec	r24
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <GPIO_readPin+0x10a>
    27a4:	ca 01       	movw	r24, r20
    27a6:	81 70       	andi	r24, 0x01	; 1
    27a8:	90 70       	andi	r25, 0x00	; 0
    27aa:	88 23       	and	r24, r24
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27b4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <GPIO_setupPortDirection+0x6>
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <GPIO_setupPortDirection+0x8>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	84 30       	cpi	r24, 0x04	; 4
    27dc:	90 f5       	brcc	.+100    	; 0x2842 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	3c 83       	std	Y+4, r19	; 0x04
    27e6:	2b 83       	std	Y+3, r18	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	91 05       	cpc	r25, r1
    27f0:	d1 f0       	breq	.+52     	; 0x2826 <GPIO_setupPortDirection+0x5e>
    27f2:	2b 81       	ldd	r18, Y+3	; 0x03
    27f4:	3c 81       	ldd	r19, Y+4	; 0x04
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	2c f4       	brge	.+10     	; 0x2806 <GPIO_setupPortDirection+0x3e>
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	61 f0       	breq	.+24     	; 0x281c <GPIO_setupPortDirection+0x54>
    2804:	1e c0       	rjmp	.+60     	; 0x2842 <GPIO_setupPortDirection+0x7a>
    2806:	2b 81       	ldd	r18, Y+3	; 0x03
    2808:	3c 81       	ldd	r19, Y+4	; 0x04
    280a:	22 30       	cpi	r18, 0x02	; 2
    280c:	31 05       	cpc	r19, r1
    280e:	81 f0       	breq	.+32     	; 0x2830 <GPIO_setupPortDirection+0x68>
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	83 30       	cpi	r24, 0x03	; 3
    2816:	91 05       	cpc	r25, r1
    2818:	81 f0       	breq	.+32     	; 0x283a <GPIO_setupPortDirection+0x72>
    281a:	13 c0       	rjmp	.+38     	; 0x2842 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    281c:	ea e3       	ldi	r30, 0x3A	; 58
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	80 83       	st	Z, r24
    2824:	0e c0       	rjmp	.+28     	; 0x2842 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2826:	e7 e3       	ldi	r30, 0x37	; 55
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	80 83       	st	Z, r24
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2830:	e4 e3       	ldi	r30, 0x34	; 52
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	80 83       	st	Z, r24
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    283a:	e1 e3       	ldi	r30, 0x31	; 49
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	80 83       	st	Z, r24
			break;
		}
	}
}
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <GPIO_writePort+0x6>
    2856:	00 d0       	rcall	.+0      	; 0x2858 <GPIO_writePort+0x8>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	84 30       	cpi	r24, 0x04	; 4
    2864:	90 f5       	brcc	.+100    	; 0x28ca <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	3c 83       	std	Y+4, r19	; 0x04
    286e:	2b 83       	std	Y+3, r18	; 0x03
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	91 05       	cpc	r25, r1
    2878:	d1 f0       	breq	.+52     	; 0x28ae <GPIO_writePort+0x5e>
    287a:	2b 81       	ldd	r18, Y+3	; 0x03
    287c:	3c 81       	ldd	r19, Y+4	; 0x04
    287e:	22 30       	cpi	r18, 0x02	; 2
    2880:	31 05       	cpc	r19, r1
    2882:	2c f4       	brge	.+10     	; 0x288e <GPIO_writePort+0x3e>
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	61 f0       	breq	.+24     	; 0x28a4 <GPIO_writePort+0x54>
    288c:	1e c0       	rjmp	.+60     	; 0x28ca <GPIO_writePort+0x7a>
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3c 81       	ldd	r19, Y+4	; 0x04
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	81 f0       	breq	.+32     	; 0x28b8 <GPIO_writePort+0x68>
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	83 30       	cpi	r24, 0x03	; 3
    289e:	91 05       	cpc	r25, r1
    28a0:	81 f0       	breq	.+32     	; 0x28c2 <GPIO_writePort+0x72>
    28a2:	13 c0       	rjmp	.+38     	; 0x28ca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    28a4:	eb e3       	ldi	r30, 0x3B	; 59
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	80 83       	st	Z, r24
    28ac:	0e c0       	rjmp	.+28     	; 0x28ca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    28ae:	e8 e3       	ldi	r30, 0x38	; 56
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	80 83       	st	Z, r24
    28b6:	09 c0       	rjmp	.+18     	; 0x28ca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    28b8:	e5 e3       	ldi	r30, 0x35	; 53
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	80 83       	st	Z, r24
    28c0:	04 c0       	rjmp	.+8      	; 0x28ca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    28c2:	e2 e3       	ldi	r30, 0x32	; 50
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	80 83       	st	Z, r24
			break;
		}
	}
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <GPIO_readPort+0x6>
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <GPIO_readPort+0x8>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    28e6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	84 30       	cpi	r24, 0x04	; 4
    28ec:	90 f5       	brcc	.+100    	; 0x2952 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	3c 83       	std	Y+4, r19	; 0x04
    28f6:	2b 83       	std	Y+3, r18	; 0x03
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	91 05       	cpc	r25, r1
    2900:	d1 f0       	breq	.+52     	; 0x2936 <GPIO_readPort+0x5e>
    2902:	2b 81       	ldd	r18, Y+3	; 0x03
    2904:	3c 81       	ldd	r19, Y+4	; 0x04
    2906:	22 30       	cpi	r18, 0x02	; 2
    2908:	31 05       	cpc	r19, r1
    290a:	2c f4       	brge	.+10     	; 0x2916 <GPIO_readPort+0x3e>
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	61 f0       	breq	.+24     	; 0x292c <GPIO_readPort+0x54>
    2914:	1e c0       	rjmp	.+60     	; 0x2952 <GPIO_readPort+0x7a>
    2916:	2b 81       	ldd	r18, Y+3	; 0x03
    2918:	3c 81       	ldd	r19, Y+4	; 0x04
    291a:	22 30       	cpi	r18, 0x02	; 2
    291c:	31 05       	cpc	r19, r1
    291e:	81 f0       	breq	.+32     	; 0x2940 <GPIO_readPort+0x68>
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	83 30       	cpi	r24, 0x03	; 3
    2926:	91 05       	cpc	r25, r1
    2928:	81 f0       	breq	.+32     	; 0x294a <GPIO_readPort+0x72>
    292a:	13 c0       	rjmp	.+38     	; 0x2952 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    292c:	e9 e3       	ldi	r30, 0x39	; 57
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	0e c0       	rjmp	.+28     	; 0x2952 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2936:	e6 e3       	ldi	r30, 0x36	; 54
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	09 c0       	rjmp	.+18     	; 0x2952 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2940:	e3 e3       	ldi	r30, 0x33	; 51
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    294a:	e0 e3       	ldi	r30, 0x30	; 48
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <KEYPAD_getPressedKeys>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKeys(void)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	60 97       	sbiw	r28, 0x10	; 16
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	62 e0       	ldi	r22, 0x02	; 2
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	63 e0       	ldi	r22, 0x03	; 3
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	64 e0       	ldi	r22, 0x04	; 4
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	65 e0       	ldi	r22, 0x05	; 5
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	66 e0       	ldi	r22, 0x06	; 6
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	67 e0       	ldi	r22, 0x07	; 7
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    29c6:	1f 86       	std	Y+15, r1	; 0x0f
    29c8:	ab c0       	rjmp	.+342    	; 0x2b20 <KEYPAD_getPressedKeys+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 5e 12 	call	0x24bc	; 0x24bc <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    29de:	18 8a       	std	Y+16, r1	; 0x10
    29e0:	22 c0       	rjmp	.+68     	; 0x2a26 <KEYPAD_getPressedKeys+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    29e2:	88 89       	ldd	r24, Y+16	; 0x10
    29e4:	98 2f       	mov	r25, r24
    29e6:	9c 5f       	subi	r25, 0xFC	; 252
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	69 2f       	mov	r22, r25
    29ec:	0e 94 49 13 	call	0x2692	; 0x2692 <GPIO_readPin>
    29f0:	88 23       	and	r24, r24
    29f2:	b1 f4       	brne	.+44     	; 0x2a20 <KEYPAD_getPressedKeys+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    29f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f6:	88 2f       	mov	r24, r24
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	98 2f       	mov	r25, r24
    2a04:	88 89       	ldd	r24, Y+16	; 0x10
    2a06:	89 0f       	add	r24, r25
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2a0e:	60 96       	adiw	r28, 0x10	; 16
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a20:	88 89       	ldd	r24, Y+16	; 0x10
    2a22:	8f 5f       	subi	r24, 0xFF	; 255
    2a24:	88 8b       	std	Y+16, r24	; 0x10
    2a26:	88 89       	ldd	r24, Y+16	; 0x10
    2a28:	84 30       	cpi	r24, 0x04	; 4
    2a2a:	d8 f2       	brcs	.-74     	; 0x29e2 <KEYPAD_getPressedKeys+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 73 11 	call	0x22e6	; 0x22e6 <GPIO_setupPinDirection>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 ea       	ldi	r26, 0xA0	; 160
    2a3c:	b0 e4       	ldi	r27, 0x40	; 64
    2a3e:	8b 87       	std	Y+11, r24	; 0x0b
    2a40:	9c 87       	std	Y+12, r25	; 0x0c
    2a42:	ad 87       	std	Y+13, r26	; 0x0d
    2a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a ef       	ldi	r20, 0xFA	; 250
    2a54:	54 e4       	ldi	r21, 0x44	; 68
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8f 83       	std	Y+7, r24	; 0x07
    2a60:	98 87       	std	Y+8, r25	; 0x08
    2a62:	a9 87       	std	Y+9, r26	; 0x09
    2a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <KEYPAD_getPressedKeys+0x126>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <KEYPAD_getPressedKeys+0x1a4>
	else if (__tmp > 65535)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <KEYPAD_getPressedKeys+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <KEYPAD_getPressedKeys+0x186>
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <KEYPAD_getPressedKeys+0x174>
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <KEYPAD_getPressedKeys+0x168>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <KEYPAD_getPressedKeys+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <KEYPAD_getPressedKeys+0x1b0>
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1c:	8f 5f       	subi	r24, 0xFF	; 255
    2b1e:	8f 87       	std	Y+15, r24	; 0x0f
    2b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b22:	84 30       	cpi	r24, 0x04	; 4
    2b24:	08 f4       	brcc	.+2      	; 0x2b28 <KEYPAD_getPressedKeys+0x1c6>
    2b26:	51 cf       	rjmp	.-350    	; 0x29ca <KEYPAD_getPressedKeys+0x68>
    2b28:	4e cf       	rjmp	.-356    	; 0x29c6 <KEYPAD_getPressedKeys+0x64>

00002b2a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2b38:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	3c 83       	std	Y+4, r19	; 0x04
    2b42:	2b 83       	std	Y+3, r18	; 0x03
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	88 30       	cpi	r24, 0x08	; 8
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2b4e:	70 c0       	rjmp	.+224    	; 0x2c30 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2b50:	2b 81       	ldd	r18, Y+3	; 0x03
    2b52:	3c 81       	ldd	r19, Y+4	; 0x04
    2b54:	29 30       	cpi	r18, 0x09	; 9
    2b56:	31 05       	cpc	r19, r1
    2b58:	5c f5       	brge	.+86     	; 0x2bb0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	91 05       	cpc	r25, r1
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2b64:	59 c0       	rjmp	.+178    	; 0x2c18 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2b66:	2b 81       	ldd	r18, Y+3	; 0x03
    2b68:	3c 81       	ldd	r19, Y+4	; 0x04
    2b6a:	25 30       	cpi	r18, 0x05	; 5
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	9c f4       	brge	.+38     	; 0x2b96 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	91 05       	cpc	r25, r1
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <KEYPAD_4x4_adjustKeyNumber+0x52>
    2b7a:	48 c0       	rjmp	.+144    	; 0x2c0c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b80:	23 30       	cpi	r18, 0x03	; 3
    2b82:	31 05       	cpc	r19, r1
    2b84:	0c f0       	brlt	.+2      	; 0x2b88 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2b86:	45 c0       	rjmp	.+138    	; 0x2c12 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	81 30       	cpi	r24, 0x01	; 1
    2b8e:	91 05       	cpc	r25, r1
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2b92:	39 c0       	rjmp	.+114    	; 0x2c06 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2b94:	68 c0       	rjmp	.+208    	; 0x2c66 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    2b96:	2b 81       	ldd	r18, Y+3	; 0x03
    2b98:	3c 81       	ldd	r19, Y+4	; 0x04
    2b9a:	26 30       	cpi	r18, 0x06	; 6
    2b9c:	31 05       	cpc	r19, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2ba0:	41 c0       	rjmp	.+130    	; 0x2c24 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	87 30       	cpi	r24, 0x07	; 7
    2ba8:	91 05       	cpc	r25, r1
    2baa:	0c f0       	brlt	.+2      	; 0x2bae <KEYPAD_4x4_adjustKeyNumber+0x84>
    2bac:	3e c0       	rjmp	.+124    	; 0x2c2a <KEYPAD_4x4_adjustKeyNumber+0x100>
    2bae:	37 c0       	rjmp	.+110    	; 0x2c1e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb4:	2c 30       	cpi	r18, 0x0C	; 12
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <KEYPAD_4x4_adjustKeyNumber+0x92>
    2bba:	46 c0       	rjmp	.+140    	; 0x2c48 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	8d 30       	cpi	r24, 0x0D	; 13
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	5c f4       	brge	.+22     	; 0x2bdc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bca:	2a 30       	cpi	r18, 0x0A	; 10
    2bcc:	31 05       	cpc	r19, r1
    2bce:	b1 f1       	breq	.+108    	; 0x2c3c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	8b 30       	cpi	r24, 0x0B	; 11
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	a4 f5       	brge	.+104    	; 0x2c42 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2bda:	2d c0       	rjmp	.+90     	; 0x2c36 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bde:	3c 81       	ldd	r19, Y+4	; 0x04
    2be0:	2e 30       	cpi	r18, 0x0E	; 14
    2be2:	31 05       	cpc	r19, r1
    2be4:	b9 f1       	breq	.+110    	; 0x2c54 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bea:	8e 30       	cpi	r24, 0x0E	; 14
    2bec:	91 05       	cpc	r25, r1
    2bee:	7c f1       	brlt	.+94     	; 0x2c4e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bf4:	2f 30       	cpi	r18, 0x0F	; 15
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	81 f1       	breq	.+96     	; 0x2c5a <KEYPAD_4x4_adjustKeyNumber+0x130>
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfe:	80 31       	cpi	r24, 0x10	; 16
    2c00:	91 05       	cpc	r25, r1
    2c02:	71 f1       	breq	.+92     	; 0x2c60 <KEYPAD_4x4_adjustKeyNumber+0x136>
    2c04:	30 c0       	rjmp	.+96     	; 0x2c66 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    2c06:	87 e3       	ldi	r24, 0x37	; 55
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	2f c0       	rjmp	.+94     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    2c0c:	88 e3       	ldi	r24, 0x38	; 56
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	2c c0       	rjmp	.+88     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    2c12:	89 e3       	ldi	r24, 0x39	; 57
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	29 c0       	rjmp	.+82     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2c18:	85 e2       	ldi	r24, 0x25	; 37
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	26 c0       	rjmp	.+76     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    2c1e:	84 e3       	ldi	r24, 0x34	; 52
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	23 c0       	rjmp	.+70     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    2c24:	85 e3       	ldi	r24, 0x35	; 53
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	20 c0       	rjmp	.+64     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    2c2a:	86 e3       	ldi	r24, 0x36	; 54
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	1d c0       	rjmp	.+58     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2c30:	8a e2       	ldi	r24, 0x2A	; 42
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	1a c0       	rjmp	.+52     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 9: keypad_button = '1';
    2c36:	81 e3       	ldi	r24, 0x31	; 49
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	17 c0       	rjmp	.+46     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    2c3c:	82 e3       	ldi	r24, 0x32	; 50
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	14 c0       	rjmp	.+40     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    2c42:	83 e3       	ldi	r24, 0x33	; 51
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	11 c0       	rjmp	.+34     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2c48:	8d e2       	ldi	r24, 0x2D	; 45
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	0e c0       	rjmp	.+28     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = '13';  /* ASCII of Enter */
    2c4e:	83 e3       	ldi	r24, 0x33	; 51
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	0b c0       	rjmp	.+22     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 14: keypad_button = '0';
    2c54:	80 e3       	ldi	r24, 0x30	; 48
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	08 c0       	rjmp	.+16     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2c5a:	8d e3       	ldi	r24, 0x3D	; 61
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	05 c0       	rjmp	.+10     	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2c60:	8b e2       	ldi	r24, 0x2B	; 43
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <__udivmodsi4>:
    2c7a:	a1 e2       	ldi	r26, 0x21	; 33
    2c7c:	1a 2e       	mov	r1, r26
    2c7e:	aa 1b       	sub	r26, r26
    2c80:	bb 1b       	sub	r27, r27
    2c82:	fd 01       	movw	r30, r26
    2c84:	0d c0       	rjmp	.+26     	; 0x2ca0 <__udivmodsi4_ep>

00002c86 <__udivmodsi4_loop>:
    2c86:	aa 1f       	adc	r26, r26
    2c88:	bb 1f       	adc	r27, r27
    2c8a:	ee 1f       	adc	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	a2 17       	cp	r26, r18
    2c90:	b3 07       	cpc	r27, r19
    2c92:	e4 07       	cpc	r30, r20
    2c94:	f5 07       	cpc	r31, r21
    2c96:	20 f0       	brcs	.+8      	; 0x2ca0 <__udivmodsi4_ep>
    2c98:	a2 1b       	sub	r26, r18
    2c9a:	b3 0b       	sbc	r27, r19
    2c9c:	e4 0b       	sbc	r30, r20
    2c9e:	f5 0b       	sbc	r31, r21

00002ca0 <__udivmodsi4_ep>:
    2ca0:	66 1f       	adc	r22, r22
    2ca2:	77 1f       	adc	r23, r23
    2ca4:	88 1f       	adc	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	1a 94       	dec	r1
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <__udivmodsi4_loop>
    2cac:	60 95       	com	r22
    2cae:	70 95       	com	r23
    2cb0:	80 95       	com	r24
    2cb2:	90 95       	com	r25
    2cb4:	9b 01       	movw	r18, r22
    2cb6:	ac 01       	movw	r20, r24
    2cb8:	bd 01       	movw	r22, r26
    2cba:	cf 01       	movw	r24, r30
    2cbc:	08 95       	ret

00002cbe <__prologue_saves__>:
    2cbe:	2f 92       	push	r2
    2cc0:	3f 92       	push	r3
    2cc2:	4f 92       	push	r4
    2cc4:	5f 92       	push	r5
    2cc6:	6f 92       	push	r6
    2cc8:	7f 92       	push	r7
    2cca:	8f 92       	push	r8
    2ccc:	9f 92       	push	r9
    2cce:	af 92       	push	r10
    2cd0:	bf 92       	push	r11
    2cd2:	cf 92       	push	r12
    2cd4:	df 92       	push	r13
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	ca 1b       	sub	r28, r26
    2ce8:	db 0b       	sbc	r29, r27
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	09 94       	ijmp

00002cf6 <__epilogue_restores__>:
    2cf6:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf8:	39 88       	ldd	r3, Y+17	; 0x11
    2cfa:	48 88       	ldd	r4, Y+16	; 0x10
    2cfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d00:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d02:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d04:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d06:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d08:	b9 84       	ldd	r11, Y+9	; 0x09
    2d0a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0c:	df 80       	ldd	r13, Y+7	; 0x07
    2d0e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d10:	fd 80       	ldd	r15, Y+5	; 0x05
    2d12:	0c 81       	ldd	r16, Y+4	; 0x04
    2d14:	1b 81       	ldd	r17, Y+3	; 0x03
    2d16:	aa 81       	ldd	r26, Y+2	; 0x02
    2d18:	b9 81       	ldd	r27, Y+1	; 0x01
    2d1a:	ce 0f       	add	r28, r30
    2d1c:	d1 1d       	adc	r29, r1
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	ed 01       	movw	r28, r26
    2d2a:	08 95       	ret

00002d2c <itoa>:
    2d2c:	fb 01       	movw	r30, r22
    2d2e:	9f 01       	movw	r18, r30
    2d30:	e8 94       	clt
    2d32:	42 30       	cpi	r20, 0x02	; 2
    2d34:	c4 f0       	brlt	.+48     	; 0x2d66 <itoa+0x3a>
    2d36:	45 32       	cpi	r20, 0x25	; 37
    2d38:	b4 f4       	brge	.+44     	; 0x2d66 <itoa+0x3a>
    2d3a:	4a 30       	cpi	r20, 0x0A	; 10
    2d3c:	29 f4       	brne	.+10     	; 0x2d48 <itoa+0x1c>
    2d3e:	97 fb       	bst	r25, 7
    2d40:	1e f4       	brtc	.+6      	; 0x2d48 <itoa+0x1c>
    2d42:	90 95       	com	r25
    2d44:	81 95       	neg	r24
    2d46:	9f 4f       	sbci	r25, 0xFF	; 255
    2d48:	64 2f       	mov	r22, r20
    2d4a:	77 27       	eor	r23, r23
    2d4c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__udivmodhi4>
    2d50:	80 5d       	subi	r24, 0xD0	; 208
    2d52:	8a 33       	cpi	r24, 0x3A	; 58
    2d54:	0c f0       	brlt	.+2      	; 0x2d58 <itoa+0x2c>
    2d56:	89 5d       	subi	r24, 0xD9	; 217
    2d58:	81 93       	st	Z+, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	a1 f7       	brne	.-24     	; 0x2d48 <itoa+0x1c>
    2d60:	16 f4       	brtc	.+4      	; 0x2d66 <itoa+0x3a>
    2d62:	5d e2       	ldi	r21, 0x2D	; 45
    2d64:	51 93       	st	Z+, r21
    2d66:	10 82       	st	Z, r1
    2d68:	c9 01       	movw	r24, r18
    2d6a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <strrev>

00002d6e <strrev>:
    2d6e:	dc 01       	movw	r26, r24
    2d70:	fc 01       	movw	r30, r24
    2d72:	67 2f       	mov	r22, r23
    2d74:	71 91       	ld	r23, Z+
    2d76:	77 23       	and	r23, r23
    2d78:	e1 f7       	brne	.-8      	; 0x2d72 <strrev+0x4>
    2d7a:	32 97       	sbiw	r30, 0x02	; 2
    2d7c:	04 c0       	rjmp	.+8      	; 0x2d86 <strrev+0x18>
    2d7e:	7c 91       	ld	r23, X
    2d80:	6d 93       	st	X+, r22
    2d82:	70 83       	st	Z, r23
    2d84:	62 91       	ld	r22, -Z
    2d86:	ae 17       	cp	r26, r30
    2d88:	bf 07       	cpc	r27, r31
    2d8a:	c8 f3       	brcs	.-14     	; 0x2d7e <strrev+0x10>
    2d8c:	08 95       	ret

00002d8e <__udivmodhi4>:
    2d8e:	aa 1b       	sub	r26, r26
    2d90:	bb 1b       	sub	r27, r27
    2d92:	51 e1       	ldi	r21, 0x11	; 17
    2d94:	07 c0       	rjmp	.+14     	; 0x2da4 <__udivmodhi4_ep>

00002d96 <__udivmodhi4_loop>:
    2d96:	aa 1f       	adc	r26, r26
    2d98:	bb 1f       	adc	r27, r27
    2d9a:	a6 17       	cp	r26, r22
    2d9c:	b7 07       	cpc	r27, r23
    2d9e:	10 f0       	brcs	.+4      	; 0x2da4 <__udivmodhi4_ep>
    2da0:	a6 1b       	sub	r26, r22
    2da2:	b7 0b       	sbc	r27, r23

00002da4 <__udivmodhi4_ep>:
    2da4:	88 1f       	adc	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	5a 95       	dec	r21
    2daa:	a9 f7       	brne	.-22     	; 0x2d96 <__udivmodhi4_loop>
    2dac:	80 95       	com	r24
    2dae:	90 95       	com	r25
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	08 95       	ret

00002db6 <_exit>:
    2db6:	f8 94       	cli

00002db8 <__stop_program>:
    2db8:	ff cf       	rjmp	.-2      	; 0x2db8 <__stop_program>
