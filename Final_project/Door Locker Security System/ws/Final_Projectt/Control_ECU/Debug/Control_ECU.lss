
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000021ca  0000225e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080007e  0080007e  0000227c  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001445  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000098d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a48b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_7>
      20:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_8>
      24:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 06 	call	0xc54	; 0xc54 <main>
      8a:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *      Author: Ahmedmohamed
 */
#include"Buzzer.h"
#include "timer1.h"
void Buzzer_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_PORT_ID,buzzer_PIN_ID,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_writePin( buzzer_PORT_ID, buzzer_PIN_ID , LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>

}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( buzzer_PORT_ID, buzzer_PIN_ID , LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( buzzer_PORT_ID, buzzer_PIN_ID , LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <motor>:
uint8 counter = 0;
uint8 temp=0;
uint8 operation=0;


void motor(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     ba0:	80 91 7e 00 	lds	r24, 0x007E
     ba4:	90 91 7f 00 	lds	r25, 0x007F
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	90 93 7f 00 	sts	0x007F, r25
     bae:	80 93 7e 00 	sts	0x007E, r24

		DcMotor_Rotate(CW,100);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	64 e6       	ldi	r22, 0x64	; 100
     bb6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DcMotor_Rotate>

	 if(ticks==15)
     bba:	80 91 7e 00 	lds	r24, 0x007E
     bbe:	90 91 7f 00 	lds	r25, 0x007F
     bc2:	8f 30       	cpi	r24, 0x0F	; 15
     bc4:	91 05       	cpc	r25, r1
     bc6:	29 f4       	brne	.+10     	; 0xbd2 <motor+0x3a>
	{
		//UART_Send_Byte(success);
		DcMotor_Rotate(STOP,0);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DcMotor_Rotate>
     bd0:	23 c0       	rjmp	.+70     	; 0xc18 <motor+0x80>
	}
	else if(ticks==18)
     bd2:	80 91 7e 00 	lds	r24, 0x007E
     bd6:	90 91 7f 00 	lds	r25, 0x007F
     bda:	82 31       	cpi	r24, 0x12	; 18
     bdc:	91 05       	cpc	r25, r1
     bde:	41 f4       	brne	.+16     	; 0xbf0 <motor+0x58>
	{
		UART_Send_Byte(success);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
		DcMotor_Rotate(CCW,100);
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	64 e6       	ldi	r22, 0x64	; 100
     bea:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DcMotor_Rotate>
     bee:	14 c0       	rjmp	.+40     	; 0xc18 <motor+0x80>

	}
	else if(ticks==30)
     bf0:	80 91 7e 00 	lds	r24, 0x007E
     bf4:	90 91 7f 00 	lds	r25, 0x007F
     bf8:	8e 31       	cpi	r24, 0x1E	; 30
     bfa:	91 05       	cpc	r25, r1
     bfc:	69 f4       	brne	.+26     	; 0xc18 <motor+0x80>
	{
		DcMotor_Rotate(STOP,0);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DcMotor_Rotate>
		UART_Send_Byte(success);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
		ticks=0;
     c0c:	10 92 7f 00 	sts	0x007F, r1
     c10:	10 92 7e 00 	sts	0x007E, r1
		TIMER1_stopCount();
     c14:	0e 94 3c 0c 	call	0x1878	; 0x1878 <TIMER1_stopCount>

	}
}
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <buzzer_time>:

void buzzer_time(void) {
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
	tick++;
     c26:	80 91 80 00 	lds	r24, 0x0080
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 80 00 	sts	0x0080, r24
		Buzzer_on();
     c30:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
	 if (tick == 60) {
     c34:	80 91 80 00 	lds	r24, 0x0080
     c38:	8c 33       	cpi	r24, 0x3C	; 60
     c3a:	49 f4       	brne	.+18     	; 0xc4e <buzzer_time+0x30>
		Buzzer_off();
     c3c:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		UART_Send_Byte(success);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
		tick=0;
     c46:	10 92 80 00 	sts	0x0080, r1
		TIMER1_stopCount();
     c4a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <TIMER1_stopCount>

	}
}
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <main>:

int main() {
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	c2 55       	subi	r28, 0x52	; 82
     c5e:	d0 40       	sbci	r29, 0x00	; 0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1 << 7);
     c6a:	af e5       	ldi	r26, 0x5F	; 95
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ef e5       	ldi	r30, 0x5F	; 95
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	8c 93       	st	X, r24
	// Timer1 enable
	Timer1_ConfigType SET = {0, 7812, pre1024, ctc};
     c78:	9e 01       	movw	r18, r28
     c7a:	23 5d       	subi	r18, 0xD3	; 211
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	26 96       	adiw	r28, 0x06	; 6
     c80:	3f af       	std	Y+63, r19	; 0x3f
     c82:	2e af       	std	Y+62, r18	; 0x3e
     c84:	26 97       	sbiw	r28, 0x06	; 6
     c86:	88 e7       	ldi	r24, 0x78	; 120
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	28 96       	adiw	r28, 0x08	; 8
     c8c:	9f af       	std	Y+63, r25	; 0x3f
     c8e:	8e af       	std	Y+62, r24	; 0x3e
     c90:	28 97       	sbiw	r28, 0x08	; 8
     c92:	96 e0       	ldi	r25, 0x06	; 6
     c94:	29 96       	adiw	r28, 0x09	; 9
     c96:	9f af       	std	Y+63, r25	; 0x3f
     c98:	29 97       	sbiw	r28, 0x09	; 9
     c9a:	28 96       	adiw	r28, 0x08	; 8
     c9c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c9e:	ff ad       	ldd	r31, Y+63	; 0x3f
     ca0:	28 97       	sbiw	r28, 0x08	; 8
     ca2:	00 80       	ld	r0, Z
     ca4:	28 96       	adiw	r28, 0x08	; 8
     ca6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ca8:	3f ad       	ldd	r19, Y+63	; 0x3f
     caa:	28 97       	sbiw	r28, 0x08	; 8
     cac:	2f 5f       	subi	r18, 0xFF	; 255
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	3f af       	std	Y+63, r19	; 0x3f
     cb4:	2e af       	std	Y+62, r18	; 0x3e
     cb6:	28 97       	sbiw	r28, 0x08	; 8
     cb8:	26 96       	adiw	r28, 0x06	; 6
     cba:	ee ad       	ldd	r30, Y+62	; 0x3e
     cbc:	ff ad       	ldd	r31, Y+63	; 0x3f
     cbe:	26 97       	sbiw	r28, 0x06	; 6
     cc0:	00 82       	st	Z, r0
     cc2:	26 96       	adiw	r28, 0x06	; 6
     cc4:	2e ad       	ldd	r18, Y+62	; 0x3e
     cc6:	3f ad       	ldd	r19, Y+63	; 0x3f
     cc8:	26 97       	sbiw	r28, 0x06	; 6
     cca:	2f 5f       	subi	r18, 0xFF	; 255
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	26 96       	adiw	r28, 0x06	; 6
     cd0:	3f af       	std	Y+63, r19	; 0x3f
     cd2:	2e af       	std	Y+62, r18	; 0x3e
     cd4:	26 97       	sbiw	r28, 0x06	; 6
     cd6:	29 96       	adiw	r28, 0x09	; 9
     cd8:	3f ad       	ldd	r19, Y+63	; 0x3f
     cda:	29 97       	sbiw	r28, 0x09	; 9
     cdc:	31 50       	subi	r19, 0x01	; 1
     cde:	29 96       	adiw	r28, 0x09	; 9
     ce0:	3f af       	std	Y+63, r19	; 0x3f
     ce2:	29 97       	sbiw	r28, 0x09	; 9
     ce4:	29 96       	adiw	r28, 0x09	; 9
     ce6:	8f ad       	ldd	r24, Y+63	; 0x3f
     ce8:	29 97       	sbiw	r28, 0x09	; 9
     cea:	88 23       	and	r24, r24
     cec:	b1 f6       	brne	.-84     	; 0xc9a <main+0x46>
	Timer1_init(&SET);
     cee:	ce 01       	movw	r24, r28
     cf0:	8d 96       	adiw	r24, 0x2d	; 45
     cf2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <Timer1_init>
	// UART enable
	UART_ConfigType setup = {bit8, disabled, bit_1, b96	};
     cf6:	fe 01       	movw	r30, r28
     cf8:	f3 96       	adiw	r30, 0x33	; 51
     cfa:	2b 96       	adiw	r28, 0x0b	; 11
     cfc:	ff af       	std	Y+63, r31	; 0x3f
     cfe:	ee af       	std	Y+62, r30	; 0x3e
     d00:	2b 97       	sbiw	r28, 0x0b	; 11
     d02:	21 e7       	ldi	r18, 0x71	; 113
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	2d 96       	adiw	r28, 0x0d	; 13
     d08:	3f af       	std	Y+63, r19	; 0x3f
     d0a:	2e af       	std	Y+62, r18	; 0x3e
     d0c:	2d 97       	sbiw	r28, 0x0d	; 13
     d0e:	37 e0       	ldi	r19, 0x07	; 7
     d10:	2e 96       	adiw	r28, 0x0e	; 14
     d12:	3f af       	std	Y+63, r19	; 0x3f
     d14:	2e 97       	sbiw	r28, 0x0e	; 14
     d16:	2d 96       	adiw	r28, 0x0d	; 13
     d18:	ee ad       	ldd	r30, Y+62	; 0x3e
     d1a:	ff ad       	ldd	r31, Y+63	; 0x3f
     d1c:	2d 97       	sbiw	r28, 0x0d	; 13
     d1e:	00 80       	ld	r0, Z
     d20:	2d 96       	adiw	r28, 0x0d	; 13
     d22:	2e ad       	ldd	r18, Y+62	; 0x3e
     d24:	3f ad       	ldd	r19, Y+63	; 0x3f
     d26:	2d 97       	sbiw	r28, 0x0d	; 13
     d28:	2f 5f       	subi	r18, 0xFF	; 255
     d2a:	3f 4f       	sbci	r19, 0xFF	; 255
     d2c:	2d 96       	adiw	r28, 0x0d	; 13
     d2e:	3f af       	std	Y+63, r19	; 0x3f
     d30:	2e af       	std	Y+62, r18	; 0x3e
     d32:	2d 97       	sbiw	r28, 0x0d	; 13
     d34:	2b 96       	adiw	r28, 0x0b	; 11
     d36:	ee ad       	ldd	r30, Y+62	; 0x3e
     d38:	ff ad       	ldd	r31, Y+63	; 0x3f
     d3a:	2b 97       	sbiw	r28, 0x0b	; 11
     d3c:	00 82       	st	Z, r0
     d3e:	2b 96       	adiw	r28, 0x0b	; 11
     d40:	2e ad       	ldd	r18, Y+62	; 0x3e
     d42:	3f ad       	ldd	r19, Y+63	; 0x3f
     d44:	2b 97       	sbiw	r28, 0x0b	; 11
     d46:	2f 5f       	subi	r18, 0xFF	; 255
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	2b 96       	adiw	r28, 0x0b	; 11
     d4c:	3f af       	std	Y+63, r19	; 0x3f
     d4e:	2e af       	std	Y+62, r18	; 0x3e
     d50:	2b 97       	sbiw	r28, 0x0b	; 11
     d52:	2e 96       	adiw	r28, 0x0e	; 14
     d54:	3f ad       	ldd	r19, Y+63	; 0x3f
     d56:	2e 97       	sbiw	r28, 0x0e	; 14
     d58:	31 50       	subi	r19, 0x01	; 1
     d5a:	2e 96       	adiw	r28, 0x0e	; 14
     d5c:	3f af       	std	Y+63, r19	; 0x3f
     d5e:	2e 97       	sbiw	r28, 0x0e	; 14
     d60:	2e 96       	adiw	r28, 0x0e	; 14
     d62:	8f ad       	ldd	r24, Y+63	; 0x3f
     d64:	2e 97       	sbiw	r28, 0x0e	; 14
     d66:	88 23       	and	r24, r24
     d68:	b1 f6       	brne	.-84     	; 0xd16 <main+0xc2>
	UART_init(&setup);
     d6a:	ce 01       	movw	r24, r28
     d6c:	c3 96       	adiw	r24, 0x33	; 51
     d6e:	0e 94 46 0c 	call	0x188c	; 0x188c <UART_init>
	// Enable buzzer
	Buzzer_init();
     d72:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	// Enable DC motor
	DcMotor_Init();
     d76:	0e 94 61 09 	call	0x12c2	; 0x12c2 <DcMotor_Init>
	// Enable TWI
	I2C_ConfigType SETUPP = {0b00000010, 400000};
     d7a:	fe 01       	movw	r30, r28
     d7c:	fa 96       	adiw	r30, 0x3a	; 58
     d7e:	60 96       	adiw	r28, 0x10	; 16
     d80:	ff af       	std	Y+63, r31	; 0x3f
     d82:	ee af       	std	Y+62, r30	; 0x3e
     d84:	60 97       	sbiw	r28, 0x10	; 16
     d86:	29 e6       	ldi	r18, 0x69	; 105
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	62 96       	adiw	r28, 0x12	; 18
     d8c:	3f af       	std	Y+63, r19	; 0x3f
     d8e:	2e af       	std	Y+62, r18	; 0x3e
     d90:	62 97       	sbiw	r28, 0x12	; 18
     d92:	38 e0       	ldi	r19, 0x08	; 8
     d94:	63 96       	adiw	r28, 0x13	; 19
     d96:	3f af       	std	Y+63, r19	; 0x3f
     d98:	63 97       	sbiw	r28, 0x13	; 19
     d9a:	62 96       	adiw	r28, 0x12	; 18
     d9c:	ee ad       	ldd	r30, Y+62	; 0x3e
     d9e:	ff ad       	ldd	r31, Y+63	; 0x3f
     da0:	62 97       	sbiw	r28, 0x12	; 18
     da2:	00 80       	ld	r0, Z
     da4:	62 96       	adiw	r28, 0x12	; 18
     da6:	2e ad       	ldd	r18, Y+62	; 0x3e
     da8:	3f ad       	ldd	r19, Y+63	; 0x3f
     daa:	62 97       	sbiw	r28, 0x12	; 18
     dac:	2f 5f       	subi	r18, 0xFF	; 255
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	62 96       	adiw	r28, 0x12	; 18
     db2:	3f af       	std	Y+63, r19	; 0x3f
     db4:	2e af       	std	Y+62, r18	; 0x3e
     db6:	62 97       	sbiw	r28, 0x12	; 18
     db8:	60 96       	adiw	r28, 0x10	; 16
     dba:	ee ad       	ldd	r30, Y+62	; 0x3e
     dbc:	ff ad       	ldd	r31, Y+63	; 0x3f
     dbe:	60 97       	sbiw	r28, 0x10	; 16
     dc0:	00 82       	st	Z, r0
     dc2:	60 96       	adiw	r28, 0x10	; 16
     dc4:	2e ad       	ldd	r18, Y+62	; 0x3e
     dc6:	3f ad       	ldd	r19, Y+63	; 0x3f
     dc8:	60 97       	sbiw	r28, 0x10	; 16
     dca:	2f 5f       	subi	r18, 0xFF	; 255
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	60 96       	adiw	r28, 0x10	; 16
     dd0:	3f af       	std	Y+63, r19	; 0x3f
     dd2:	2e af       	std	Y+62, r18	; 0x3e
     dd4:	60 97       	sbiw	r28, 0x10	; 16
     dd6:	63 96       	adiw	r28, 0x13	; 19
     dd8:	3f ad       	ldd	r19, Y+63	; 0x3f
     dda:	63 97       	sbiw	r28, 0x13	; 19
     ddc:	31 50       	subi	r19, 0x01	; 1
     dde:	63 96       	adiw	r28, 0x13	; 19
     de0:	3f af       	std	Y+63, r19	; 0x3f
     de2:	63 97       	sbiw	r28, 0x13	; 19
     de4:	63 96       	adiw	r28, 0x13	; 19
     de6:	8f ad       	ldd	r24, Y+63	; 0x3f
     de8:	63 97       	sbiw	r28, 0x13	; 19
     dea:	88 23       	and	r24, r24
     dec:	b1 f6       	brne	.-84     	; 0xd9a <main+0x146>
	TWI_init(&SETUPP);
     dee:	ce 01       	movw	r24, r28
     df0:	ca 96       	adiw	r24, 0x3a	; 58
     df2:	0e 94 4f 0a 	call	0x149e	; 0x149e <TWI_init>
	Timer1_AsetCallBack(motor);
     df6:	8c ec       	ldi	r24, 0xCC	; 204
     df8:	95 e0       	ldi	r25, 0x05	; 5
     dfa:	0e 94 0f 0c 	call	0x181e	; 0x181e <Timer1_AsetCallBack>
	TIMER1_stopCount();
     dfe:	0e 94 3c 0c 	call	0x1878	; 0x1878 <TIMER1_stopCount>

	while (UART_Receive_Byte() != MC1_READY) {} // POLLING
     e02:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
     e06:	80 31       	cpi	r24, 0x10	; 16
     e08:	e1 f7       	brne	.-8      	; 0xe02 <main+0x1ae>
	UART_Receive_String(arr1);
     e0a:	8a e8       	ldi	r24, 0x8A	; 138
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>
	UART_Receive_String(arr2);
     e12:	88 e9       	ldi	r24, 0x98	; 152
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>

	for (int i = 0; i < 7; i++) {
     e1a:	1c a6       	std	Y+44, r1	; 0x2c
     e1c:	1b a6       	std	Y+43, r1	; 0x2b
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <main+0x1f8>
		if (arr1[i] != arr2[i]) {
     e20:	8b a5       	ldd	r24, Y+43	; 0x2b
     e22:	9c a5       	ldd	r25, Y+44	; 0x2c
     e24:	fc 01       	movw	r30, r24
     e26:	e6 57       	subi	r30, 0x76	; 118
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	20 81       	ld	r18, Z
     e2c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e2e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e30:	fc 01       	movw	r30, r24
     e32:	e8 56       	subi	r30, 0x68	; 104
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	28 17       	cp	r18, r24
     e3a:	19 f0       	breq	.+6      	; 0xe42 <main+0x1ee>
			flag = 0;
     e3c:	10 92 68 00 	sts	0x0068, r1
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <main+0x202>

	while (UART_Receive_Byte() != MC1_READY) {} // POLLING
	UART_Receive_String(arr1);
	UART_Receive_String(arr2);

	for (int i = 0; i < 7; i++) {
     e42:	8b a5       	ldd	r24, Y+43	; 0x2b
     e44:	9c a5       	ldd	r25, Y+44	; 0x2c
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	9c a7       	std	Y+44, r25	; 0x2c
     e4a:	8b a7       	std	Y+43, r24	; 0x2b
     e4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e50:	87 30       	cpi	r24, 0x07	; 7
     e52:	91 05       	cpc	r25, r1
     e54:	2c f3       	brlt	.-54     	; 0xe20 <main+0x1cc>
			flag = 0;
			break;
		}
	}

	if (flag == 1) {
     e56:	80 91 68 00 	lds	r24, 0x0068
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	09 f0       	breq	.+2      	; 0xe60 <main+0x20c>
     e5e:	93 c0       	rjmp	.+294    	; 0xf86 <main+0x332>
		for (int i = 0; i < 5; i++) {
     e60:	1a a6       	std	Y+42, r1	; 0x2a
     e62:	19 a6       	std	Y+41, r1	; 0x29
     e64:	86 c0       	rjmp	.+268    	; 0xf72 <main+0x31e>
			EEPROM_writeByte((0x0311 + i), arr1[i]);
     e66:	89 a5       	ldd	r24, Y+41	; 0x29
     e68:	9a a5       	ldd	r25, Y+42	; 0x2a
     e6a:	8f 5e       	subi	r24, 0xEF	; 239
     e6c:	9c 4f       	sbci	r25, 0xFC	; 252
     e6e:	9c 01       	movw	r18, r24
     e70:	89 a5       	ldd	r24, Y+41	; 0x29
     e72:	9a a5       	ldd	r25, Y+42	; 0x2a
     e74:	fc 01       	movw	r30, r24
     e76:	e6 57       	subi	r30, 0x76	; 118
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	40 81       	ld	r20, Z
     e7c:	c9 01       	movw	r24, r18
     e7e:	64 2f       	mov	r22, r20
     e80:	0e 94 ae 09 	call	0x135c	; 0x135c <EEPROM_writeByte>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e2       	ldi	r26, 0x20	; 32
     e8a:	b1 e4       	ldi	r27, 0x41	; 65
     e8c:	89 8f       	std	Y+25, r24	; 0x19
     e8e:	9a 8f       	std	Y+26, r25	; 0x1a
     e90:	ab 8f       	std	Y+27, r26	; 0x1b
     e92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	69 8d       	ldd	r22, Y+25	; 0x19
     e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a ef       	ldi	r20, 0xFA	; 250
     ea2:	54 e4       	ldi	r21, 0x44	; 68
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8d 8b       	std	Y+21, r24	; 0x15
     eae:	9e 8b       	std	Y+22, r25	; 0x16
     eb0:	af 8b       	std	Y+23, r26	; 0x17
     eb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eb4:	6d 89       	ldd	r22, Y+21	; 0x15
     eb6:	7e 89       	ldd	r23, Y+22	; 0x16
     eb8:	8f 89       	ldd	r24, Y+23	; 0x17
     eba:	98 8d       	ldd	r25, Y+24	; 0x18
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec8:	88 23       	and	r24, r24
     eca:	2c f4       	brge	.+10     	; 0xed6 <main+0x282>
		__ticks = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 8b       	std	Y+20, r25	; 0x14
     ed2:	8b 8b       	std	Y+19, r24	; 0x13
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <main+0x300>
	else if (__tmp > 65535)
     ed6:	6d 89       	ldd	r22, Y+21	; 0x15
     ed8:	7e 89       	ldd	r23, Y+22	; 0x16
     eda:	8f 89       	ldd	r24, Y+23	; 0x17
     edc:	98 8d       	ldd	r25, Y+24	; 0x18
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eea:	18 16       	cp	r1, r24
     eec:	4c f5       	brge	.+82     	; 0xf40 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eee:	69 8d       	ldd	r22, Y+25	; 0x19
     ef0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9c 8b       	std	Y+20, r25	; 0x14
     f14:	8b 8b       	std	Y+19, r24	; 0x13
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <main+0x2e2>
     f18:	88 ec       	ldi	r24, 0xC8	; 200
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9a 8b       	std	Y+18, r25	; 0x12
     f1e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f20:	89 89       	ldd	r24, Y+17	; 0x11
     f22:	9a 89       	ldd	r25, Y+18	; 0x12
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <main+0x2d0>
     f28:	9a 8b       	std	Y+18, r25	; 0x12
     f2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2c:	8b 89       	ldd	r24, Y+19	; 0x13
     f2e:	9c 89       	ldd	r25, Y+20	; 0x14
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	9c 8b       	std	Y+20, r25	; 0x14
     f34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f36:	8b 89       	ldd	r24, Y+19	; 0x13
     f38:	9c 89       	ldd	r25, Y+20	; 0x14
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	69 f7       	brne	.-38     	; 0xf18 <main+0x2c4>
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <main+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f40:	6d 89       	ldd	r22, Y+21	; 0x15
     f42:	7e 89       	ldd	r23, Y+22	; 0x16
     f44:	8f 89       	ldd	r24, Y+23	; 0x17
     f46:	98 8d       	ldd	r25, Y+24	; 0x18
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9c 8b       	std	Y+20, r25	; 0x14
     f52:	8b 8b       	std	Y+19, r24	; 0x13
     f54:	8b 89       	ldd	r24, Y+19	; 0x13
     f56:	9c 89       	ldd	r25, Y+20	; 0x14
     f58:	98 8b       	std	Y+16, r25	; 0x10
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
     f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5e:	98 89       	ldd	r25, Y+16	; 0x10
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x30c>
     f64:	98 8b       	std	Y+16, r25	; 0x10
     f66:	8f 87       	std	Y+15, r24	; 0x0f
			break;
		}
	}

	if (flag == 1) {
		for (int i = 0; i < 5; i++) {
     f68:	89 a5       	ldd	r24, Y+41	; 0x29
     f6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	9a a7       	std	Y+42, r25	; 0x2a
     f70:	89 a7       	std	Y+41, r24	; 0x29
     f72:	89 a5       	ldd	r24, Y+41	; 0x29
     f74:	9a a5       	ldd	r25, Y+42	; 0x2a
     f76:	85 30       	cpi	r24, 0x05	; 5
     f78:	91 05       	cpc	r25, r1
     f7a:	0c f4       	brge	.+2      	; 0xf7e <main+0x32a>
     f7c:	74 cf       	rjmp	.-280    	; 0xe66 <main+0x212>
			EEPROM_writeByte((0x0311 + i), arr1[i]);
			_delay_ms(10); // Wait for write operation to complete
		}
		UART_Send_Byte(success);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <main+0x338>


	} else {
		UART_Send_Byte(failed);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
	}

	while(1)
	{
		//switch
		operation=UART_Receive_Byte();
     f8c:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
     f90:	80 93 83 00 	sts	0x0083, r24
		switch (operation)
     f94:	80 91 83 00 	lds	r24, 0x0083
     f98:	e8 2f       	mov	r30, r24
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	24 96       	adiw	r28, 0x04	; 4
     f9e:	ff af       	std	Y+63, r31	; 0x3f
     fa0:	ee af       	std	Y+62, r30	; 0x3e
     fa2:	24 97       	sbiw	r28, 0x04	; 4
     fa4:	24 96       	adiw	r28, 0x04	; 4
     fa6:	2e ad       	ldd	r18, Y+62	; 0x3e
     fa8:	3f ad       	ldd	r19, Y+63	; 0x3f
     faa:	24 97       	sbiw	r28, 0x04	; 4
     fac:	2b 32       	cpi	r18, 0x2B	; 43
     fae:	31 05       	cpc	r19, r1
     fb0:	49 f0       	breq	.+18     	; 0xfc4 <main+0x370>
     fb2:	24 96       	adiw	r28, 0x04	; 4
     fb4:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb6:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb8:	24 97       	sbiw	r28, 0x04	; 4
     fba:	8d 32       	cpi	r24, 0x2D	; 45
     fbc:	91 05       	cpc	r25, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <main+0x36e>
     fc0:	5f c0       	rjmp	.+190    	; 0x1080 <main+0x42c>
     fc2:	e4 cf       	rjmp	.-56     	; 0xf8c <main+0x338>
		{
		case '+':
		{
			while (UART_Receive_Byte() != MC1_READY) {} // POLLING
     fc4:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
     fc8:	80 31       	cpi	r24, 0x10	; 16
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <main+0x370>
			UART_Receive_String(arr3);
     fcc:	81 e9       	ldi	r24, 0x91	; 145
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>

			for (int i = 0; i < 3; i++) {
     fd4:	18 a6       	std	Y+40, r1	; 0x28
     fd6:	1f a2       	std	Y+39, r1	; 0x27
     fd8:	4c c0       	rjmp	.+152    	; 0x1072 <main+0x41e>
				flag = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 68 00 	sts	0x0068, r24
				//counter++;
				if(i==2)
     fe0:	8f a1       	ldd	r24, Y+39	; 0x27
     fe2:	98 a5       	ldd	r25, Y+40	; 0x28
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
     fe8:	51 f4       	brne	.+20     	; 0xffe <main+0x3aa>
				{
					Timer1_AsetCallBack(buzzer_time);
     fea:	8f e0       	ldi	r24, 0x0F	; 15
     fec:	96 e0       	ldi	r25, 0x06	; 6
     fee:	0e 94 0f 0c 	call	0x181e	; 0x181e <Timer1_AsetCallBack>
					TIMER1_stopCount();
     ff2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <TIMER1_stopCount>
					TIMER1_startCount(pre1024);
     ff6:	85 e0       	ldi	r24, 0x05	; 5
     ff8:	0e 94 21 0c 	call	0x1842	; 0x1842 <TIMER1_startCount>
     ffc:	c7 cf       	rjmp	.-114    	; 0xf8c <main+0x338>
					break;
				}
				for (int i = 0; i < 5; i++)
     ffe:	1e a2       	std	Y+38, r1	; 0x26
    1000:	1d a2       	std	Y+37, r1	; 0x25
    1002:	1b c0       	rjmp	.+54     	; 0x103a <main+0x3e6>
				{



					EEPROM_readByte((0x0311 + i),&temp);
    1004:	8d a1       	ldd	r24, Y+37	; 0x25
    1006:	9e a1       	ldd	r25, Y+38	; 0x26
    1008:	8f 5e       	subi	r24, 0xEF	; 239
    100a:	9c 4f       	sbci	r25, 0xFC	; 252
    100c:	22 e8       	ldi	r18, 0x82	; 130
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	b9 01       	movw	r22, r18
    1012:	0e 94 ef 09 	call	0x13de	; 0x13de <EEPROM_readByte>

					if (temp!= arr3[i])
    1016:	8d a1       	ldd	r24, Y+37	; 0x25
    1018:	9e a1       	ldd	r25, Y+38	; 0x26
    101a:	fc 01       	movw	r30, r24
    101c:	ef 56       	subi	r30, 0x6F	; 111
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	90 81       	ld	r25, Z
    1022:	80 91 82 00 	lds	r24, 0x0082
    1026:	98 17       	cp	r25, r24
    1028:	19 f0       	breq	.+6      	; 0x1030 <main+0x3dc>
					{
						flag = 0;
    102a:	10 92 68 00 	sts	0x0068, r1
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <main+0x3f0>
					Timer1_AsetCallBack(buzzer_time);
					TIMER1_stopCount();
					TIMER1_startCount(pre1024);
					break;
				}
				for (int i = 0; i < 5; i++)
    1030:	8d a1       	ldd	r24, Y+37	; 0x25
    1032:	9e a1       	ldd	r25, Y+38	; 0x26
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	9e a3       	std	Y+38, r25	; 0x26
    1038:	8d a3       	std	Y+37, r24	; 0x25
    103a:	8d a1       	ldd	r24, Y+37	; 0x25
    103c:	9e a1       	ldd	r25, Y+38	; 0x26
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	91 05       	cpc	r25, r1
    1042:	04 f3       	brlt	.-64     	; 0x1004 <main+0x3b0>
						flag = 0;
						break;
					}
				}

				if (flag == 1) {
    1044:	80 91 68 00 	lds	r24, 0x0068
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	39 f4       	brne	.+14     	; 0x105a <main+0x406>
					UART_Send_Byte(success);
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
					TIMER1_startCount(pre1024);
    1052:	85 e0       	ldi	r24, 0x05	; 5
    1054:	0e 94 21 0c 	call	0x1842	; 0x1842 <TIMER1_startCount>
    1058:	99 cf       	rjmp	.-206    	; 0xf8c <main+0x338>

					break;
				} else {
					UART_Send_Byte(failed);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
					UART_Receive_String(arr3);
    1060:	81 e9       	ldi	r24, 0x91	; 145
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>
		case '+':
		{
			while (UART_Receive_Byte() != MC1_READY) {} // POLLING
			UART_Receive_String(arr3);

			for (int i = 0; i < 3; i++) {
    1068:	8f a1       	ldd	r24, Y+39	; 0x27
    106a:	98 a5       	ldd	r25, Y+40	; 0x28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	98 a7       	std	Y+40, r25	; 0x28
    1070:	8f a3       	std	Y+39, r24	; 0x27
    1072:	8f a1       	ldd	r24, Y+39	; 0x27
    1074:	98 a5       	ldd	r25, Y+40	; 0x28
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	0c f4       	brge	.+2      	; 0x107e <main+0x42a>
    107c:	ae cf       	rjmp	.-164    	; 0xfda <main+0x386>
    107e:	86 cf       	rjmp	.-244    	; 0xf8c <main+0x338>
			}*/
		}
		break;
		case '-':
		{
			while (UART_Receive_Byte() != MC1_READY) {} // POLLING
    1080:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
    1084:	80 31       	cpi	r24, 0x10	; 16
    1086:	e1 f7       	brne	.-8      	; 0x1080 <main+0x42c>
			UART_Receive_String(arr3);
    1088:	81 e9       	ldi	r24, 0x91	; 145
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>

			for (int i = 0; i < 3; i++) {
    1090:	1c a2       	std	Y+36, r1	; 0x24
    1092:	1b a2       	std	Y+35, r1	; 0x23
    1094:	0f c1       	rjmp	.+542    	; 0x12b4 <main+0x660>
				flag = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 68 00 	sts	0x0068, r24
				if(i==2)
    109c:	8b a1       	ldd	r24, Y+35	; 0x23
    109e:	9c a1       	ldd	r25, Y+36	; 0x24
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	51 f4       	brne	.+20     	; 0x10ba <main+0x466>
				{
					Timer1_AsetCallBack(buzzer_time);
    10a6:	8f e0       	ldi	r24, 0x0F	; 15
    10a8:	96 e0       	ldi	r25, 0x06	; 6
    10aa:	0e 94 0f 0c 	call	0x181e	; 0x181e <Timer1_AsetCallBack>
					TIMER1_stopCount();
    10ae:	0e 94 3c 0c 	call	0x1878	; 0x1878 <TIMER1_stopCount>
					TIMER1_startCount(pre1024);
    10b2:	85 e0       	ldi	r24, 0x05	; 5
    10b4:	0e 94 21 0c 	call	0x1842	; 0x1842 <TIMER1_startCount>
    10b8:	69 cf       	rjmp	.-302    	; 0xf8c <main+0x338>
					break;
				}
				for (int i = 0; i < 5; i++)
    10ba:	1a a2       	std	Y+34, r1	; 0x22
    10bc:	19 a2       	std	Y+33, r1	; 0x21
    10be:	1b c0       	rjmp	.+54     	; 0x10f6 <main+0x4a2>
				{



					EEPROM_readByte((0x0311 + i),&temp);
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	8f 5e       	subi	r24, 0xEF	; 239
    10c6:	9c 4f       	sbci	r25, 0xFC	; 252
    10c8:	22 e8       	ldi	r18, 0x82	; 130
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	b9 01       	movw	r22, r18
    10ce:	0e 94 ef 09 	call	0x13de	; 0x13de <EEPROM_readByte>

					if (temp!= arr3[i])
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	fc 01       	movw	r30, r24
    10d8:	ef 56       	subi	r30, 0x6F	; 111
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	90 81       	ld	r25, Z
    10de:	80 91 82 00 	lds	r24, 0x0082
    10e2:	98 17       	cp	r25, r24
    10e4:	19 f0       	breq	.+6      	; 0x10ec <main+0x498>
					{
						flag = 0;
    10e6:	10 92 68 00 	sts	0x0068, r1
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <main+0x4ac>
					Timer1_AsetCallBack(buzzer_time);
					TIMER1_stopCount();
					TIMER1_startCount(pre1024);
					break;
				}
				for (int i = 0; i < 5; i++)
    10ec:	89 a1       	ldd	r24, Y+33	; 0x21
    10ee:	9a a1       	ldd	r25, Y+34	; 0x22
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	9a a3       	std	Y+34, r25	; 0x22
    10f4:	89 a3       	std	Y+33, r24	; 0x21
    10f6:	89 a1       	ldd	r24, Y+33	; 0x21
    10f8:	9a a1       	ldd	r25, Y+34	; 0x22
    10fa:	85 30       	cpi	r24, 0x05	; 5
    10fc:	91 05       	cpc	r25, r1
    10fe:	04 f3       	brlt	.-64     	; 0x10c0 <main+0x46c>
						flag = 0;
						break;
					}
				}

				if (flag == 1) {
    1100:	80 91 68 00 	lds	r24, 0x0068
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	09 f0       	breq	.+2      	; 0x110a <main+0x4b6>
    1108:	c9 c0       	rjmp	.+402    	; 0x129c <main+0x648>
					UART_Send_Byte(1);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
					while (UART_Receive_Byte() != MC1_READY) {} // POLLING
    1110:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
    1114:	80 31       	cpi	r24, 0x10	; 16
    1116:	e1 f7       	brne	.-8      	; 0x1110 <main+0x4bc>
					UART_Receive_String(arr1);
    1118:	8a e8       	ldi	r24, 0x8A	; 138
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>
					UART_Receive_String(arr2);
    1120:	88 e9       	ldi	r24, 0x98	; 152
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>

					for (int i = 0; i < 7; i++) {
    1128:	18 a2       	std	Y+32, r1	; 0x20
    112a:	1f 8e       	std	Y+31, r1	; 0x1f
    112c:	16 c0       	rjmp	.+44     	; 0x115a <main+0x506>
						if (arr1[i] != arr2[i]) {
    112e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1130:	98 a1       	ldd	r25, Y+32	; 0x20
    1132:	fc 01       	movw	r30, r24
    1134:	e6 57       	subi	r30, 0x76	; 118
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	20 81       	ld	r18, Z
    113a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    113c:	98 a1       	ldd	r25, Y+32	; 0x20
    113e:	fc 01       	movw	r30, r24
    1140:	e8 56       	subi	r30, 0x68	; 104
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 81       	ld	r24, Z
    1146:	28 17       	cp	r18, r24
    1148:	19 f0       	breq	.+6      	; 0x1150 <main+0x4fc>
							flag = 0;
    114a:	10 92 68 00 	sts	0x0068, r1
    114e:	0a c0       	rjmp	.+20     	; 0x1164 <main+0x510>
					UART_Send_Byte(1);
					while (UART_Receive_Byte() != MC1_READY) {} // POLLING
					UART_Receive_String(arr1);
					UART_Receive_String(arr2);

					for (int i = 0; i < 7; i++) {
    1150:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1152:	98 a1       	ldd	r25, Y+32	; 0x20
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	98 a3       	std	Y+32, r25	; 0x20
    1158:	8f 8f       	std	Y+31, r24	; 0x1f
    115a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    115c:	98 a1       	ldd	r25, Y+32	; 0x20
    115e:	87 30       	cpi	r24, 0x07	; 7
    1160:	91 05       	cpc	r25, r1
    1162:	2c f3       	brlt	.-54     	; 0x112e <main+0x4da>
							flag = 0;
							break;
						}
					}

					if (flag == 1) {
    1164:	80 91 68 00 	lds	r24, 0x0068
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	09 f0       	breq	.+2      	; 0x116e <main+0x51a>
    116c:	93 c0       	rjmp	.+294    	; 0x1294 <main+0x640>
						for (int i = 0; i < 5; i++) {
    116e:	1e 8e       	std	Y+30, r1	; 0x1e
    1170:	1d 8e       	std	Y+29, r1	; 0x1d
    1172:	86 c0       	rjmp	.+268    	; 0x1280 <main+0x62c>
							EEPROM_writeByte((0x0311 + i), arr1[i]);
    1174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1178:	8f 5e       	subi	r24, 0xEF	; 239
    117a:	9c 4f       	sbci	r25, 0xFC	; 252
    117c:	9c 01       	movw	r18, r24
    117e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1180:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1182:	fc 01       	movw	r30, r24
    1184:	e6 57       	subi	r30, 0x76	; 118
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	40 81       	ld	r20, Z
    118a:	c9 01       	movw	r24, r18
    118c:	64 2f       	mov	r22, r20
    118e:	0e 94 ae 09 	call	0x135c	; 0x135c <EEPROM_writeByte>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a0 e2       	ldi	r26, 0x20	; 32
    1198:	b1 e4       	ldi	r27, 0x41	; 65
    119a:	8b 87       	std	Y+11, r24	; 0x0b
    119c:	9c 87       	std	Y+12, r25	; 0x0c
    119e:	ad 87       	std	Y+13, r26	; 0x0d
    11a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a ef       	ldi	r20, 0xFA	; 250
    11b0:	54 e4       	ldi	r21, 0x44	; 68
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8f 83       	std	Y+7, r24	; 0x07
    11bc:	98 87       	std	Y+8, r25	; 0x08
    11be:	a9 87       	std	Y+9, r26	; 0x09
    11c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <main+0x590>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9e 83       	std	Y+6, r25	; 0x06
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <main+0x60e>
	else if (__tmp > 65535)
    11e4:	6f 81       	ldd	r22, Y+7	; 0x07
    11e6:	78 85       	ldd	r23, Y+8	; 0x08
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <main+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1200:	8d 85       	ldd	r24, Y+13	; 0x0d
    1202:	9e 85       	ldd	r25, Y+14	; 0x0e
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	8d 83       	std	Y+5, r24	; 0x05
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <main+0x5f0>
    1226:	88 ec       	ldi	r24, 0xC8	; 200
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <main+0x5de>
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <main+0x5d2>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <main+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <main+0x61a>
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
							break;
						}
					}

					if (flag == 1) {
						for (int i = 0; i < 5; i++) {
    1276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1278:	9e 8d       	ldd	r25, Y+30	; 0x1e
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	9e 8f       	std	Y+30, r25	; 0x1e
    127e:	8d 8f       	std	Y+29, r24	; 0x1d
    1280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1282:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1284:	85 30       	cpi	r24, 0x05	; 5
    1286:	91 05       	cpc	r25, r1
    1288:	0c f4       	brge	.+2      	; 0x128c <main+0x638>
    128a:	74 cf       	rjmp	.-280    	; 0x1174 <main+0x520>
							EEPROM_writeByte((0x0311 + i), arr1[i]);
							_delay_ms(10); // Wait for write operation to complete
						}
						UART_Send_Byte(success);
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <main+0x656>


					} else {
						UART_Send_Byte(failed);
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <main+0x656>
					}
				} else {
					UART_Send_Byte(failed);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
					UART_Receive_String(arr3);
    12a2:	81 e9       	ldi	r24, 0x91	; 145
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <UART_Receive_String>
		case '-':
		{
			while (UART_Receive_Byte() != MC1_READY) {} // POLLING
			UART_Receive_String(arr3);

			for (int i = 0; i < 3; i++) {
    12aa:	8b a1       	ldd	r24, Y+35	; 0x23
    12ac:	9c a1       	ldd	r25, Y+36	; 0x24
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	9c a3       	std	Y+36, r25	; 0x24
    12b2:	8b a3       	std	Y+35, r24	; 0x23
    12b4:	8b a1       	ldd	r24, Y+35	; 0x23
    12b6:	9c a1       	ldd	r25, Y+36	; 0x24
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	0c f4       	brge	.+2      	; 0x12c0 <main+0x66c>
    12be:	eb ce       	rjmp	.-554    	; 0x1096 <main+0x442>
    12c0:	65 ce       	rjmp	.-822    	; 0xf8c <main+0x338>

000012c2 <DcMotor_Init>:

#include"gpio.h"
#include"DC_motor.h"
#include"TIMER0.h"
void DcMotor_Init(void)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(IN1_PORT_ID,IN1_PIN_ID,PIN_OUTPUT);
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT_ID,IN2_PIN_ID,PIN_OUTPUT);
    12d4:	83 e0       	ldi	r24, 0x03	; 3
    12d6:	66 e0       	ldi	r22, 0x06	; 6
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>


}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DcMotor_Rotate+0x6>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	6a 83       	std	Y+2, r22	; 0x02
	if(state==CW)
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	59 f4       	brne	.+22     	; 0x130e <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID,LOGIC_LOW);
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	65 e0       	ldi	r22, 0x05	; 5
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID,LOGIC_HIGH);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	66 e0       	ldi	r22, 0x06	; 6
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    130c:	1b c0       	rjmp	.+54     	; 0x1344 <DcMotor_Rotate+0x60>
	}
	else if(state==CCW)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	59 f4       	brne	.+22     	; 0x132a <DcMotor_Rotate+0x46>
		{
			GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID,LOGIC_HIGH);
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	65 e0       	ldi	r22, 0x05	; 5
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
			GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID,LOGIC_LOW);
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	66 e0       	ldi	r22, 0x06	; 6
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <DcMotor_Rotate+0x60>
		}
	else if(state==STOP)
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	88 23       	and	r24, r24
    132e:	51 f4       	brne	.+20     	; 0x1344 <DcMotor_Rotate+0x60>
		{
			GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID,LOGIC_LOW);
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	65 e0       	ldi	r22, 0x05	; 5
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
			GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID,LOGIC_LOW);
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	66 e0       	ldi	r22, 0x06	; 6
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
		}
	PWM_Timer0_Init(speed*(250/100));
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0e 94 ed 0a 	call	0x15da	; 0x15da <PWM_Timer0_Init>



}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <EEPROM_writeByte>:
 ***************************/
#include "EEPROM.h"
#include "I2C.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <EEPROM_writeByte+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <EEPROM_writeByte+0x8>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    136e:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1372:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	11 f0       	breq	.+4      	; 0x137e <EEPROM_writeByte+0x22>
        return ERROR;
    137a:	1c 82       	std	Y+4, r1	; 0x04
    137c:	28 c0       	rjmp	.+80     	; 0x13ce <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	80 70       	andi	r24, 0x00	; 0
    1384:	97 70       	andi	r25, 0x07	; 7
    1386:	88 0f       	add	r24, r24
    1388:	89 2f       	mov	r24, r25
    138a:	88 1f       	adc	r24, r24
    138c:	99 0b       	sbc	r25, r25
    138e:	91 95       	neg	r25
    1390:	80 6a       	ori	r24, 0xA0	; 160
    1392:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1396:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    139a:	88 31       	cpi	r24, 0x18	; 24
    139c:	11 f0       	breq	.+4      	; 0x13a2 <EEPROM_writeByte+0x46>
        return ERROR;
    139e:	1c 82       	std	Y+4, r1	; 0x04
    13a0:	16 c0       	rjmp	.+44     	; 0x13ce <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13a8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    13ac:	88 32       	cpi	r24, 0x28	; 40
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <EEPROM_writeByte+0x58>
        return ERROR;
    13b0:	1c 82       	std	Y+4, r1	; 0x04
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13ba:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    13be:	88 32       	cpi	r24, 0x28	; 40
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <EEPROM_writeByte+0x6a>
        return ERROR;
    13c2:	1c 82       	std	Y+4, r1	; 0x04
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13c6:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_stop>

    return SUCCESS;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	8c 83       	std	Y+4, r24	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <EEPROM_readByte+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <EEPROM_readByte+0x8>
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	7c 83       	std	Y+4, r23	; 0x04
    13f2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13f4:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13f8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    13fc:	88 30       	cpi	r24, 0x08	; 8
    13fe:	11 f0       	breq	.+4      	; 0x1404 <EEPROM_readByte+0x26>
        return ERROR;
    1400:	1d 82       	std	Y+5, r1	; 0x05
    1402:	44 c0       	rjmp	.+136    	; 0x148c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	80 70       	andi	r24, 0x00	; 0
    140a:	97 70       	andi	r25, 0x07	; 7
    140c:	88 0f       	add	r24, r24
    140e:	89 2f       	mov	r24, r25
    1410:	88 1f       	adc	r24, r24
    1412:	99 0b       	sbc	r25, r25
    1414:	91 95       	neg	r25
    1416:	80 6a       	ori	r24, 0xA0	; 160
    1418:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    141c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    1420:	88 31       	cpi	r24, 0x18	; 24
    1422:	11 f0       	breq	.+4      	; 0x1428 <EEPROM_readByte+0x4a>
        return ERROR;
    1424:	1d 82       	std	Y+5, r1	; 0x05
    1426:	32 c0       	rjmp	.+100    	; 0x148c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    142e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    1432:	88 32       	cpi	r24, 0x28	; 40
    1434:	11 f0       	breq	.+4      	; 0x143a <EEPROM_readByte+0x5c>
        return ERROR;
    1436:	1d 82       	std	Y+5, r1	; 0x05
    1438:	29 c0       	rjmp	.+82     	; 0x148c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    143a:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    143e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    1442:	80 31       	cpi	r24, 0x10	; 16
    1444:	11 f0       	breq	.+4      	; 0x144a <EEPROM_readByte+0x6c>
        return ERROR;
    1446:	1d 82       	std	Y+5, r1	; 0x05
    1448:	21 c0       	rjmp	.+66     	; 0x148c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	80 70       	andi	r24, 0x00	; 0
    1450:	97 70       	andi	r25, 0x07	; 7
    1452:	88 0f       	add	r24, r24
    1454:	89 2f       	mov	r24, r25
    1456:	88 1f       	adc	r24, r24
    1458:	99 0b       	sbc	r25, r25
    145a:	91 95       	neg	r25
    145c:	81 6a       	ori	r24, 0xA1	; 161
    145e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1462:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    1466:	80 34       	cpi	r24, 0x40	; 64
    1468:	11 f0       	breq	.+4      	; 0x146e <EEPROM_readByte+0x90>
        return ERROR;
    146a:	1d 82       	std	Y+5, r1	; 0x05
    146c:	0f c0       	rjmp	.+30     	; 0x148c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    146e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <TWI_readByteWithNACK>
    1472:	eb 81       	ldd	r30, Y+3	; 0x03
    1474:	fc 81       	ldd	r31, Y+4	; 0x04
    1476:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1478:	0e 94 de 0a 	call	0x15bc	; 0x15bc <TWI_getStatus>
    147c:	88 35       	cpi	r24, 0x58	; 88
    147e:	11 f0       	breq	.+4      	; 0x1484 <EEPROM_readByte+0xa6>
        return ERROR;
    1480:	1d 82       	std	Y+5, r1	; 0x05
    1482:	04 c0       	rjmp	.+8      	; 0x148c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1484:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_stop>

    return SUCCESS;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <TWI_init>:
 */
#include"avr/io.h"
#include"I2C.h"
#include"common_macros.h"
void TWI_init(const I2C_ConfigType * Config_Ptr)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <TWI_init+0x6>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9b 83       	std	Y+3, r25	; 0x03
    14ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 twbr_value = 0 ;
    14ae:	19 82       	std	Y+1, r1	; 0x01
	twbr_value=	(uint8)(((8000000)/(Config_Ptr->bit_rate))-16)/2;
    14b0:	ea 81       	ldd	r30, Y+2	; 0x02
    14b2:	fb 81       	ldd	r31, Y+3	; 0x03
    14b4:	24 81       	ldd	r18, Z+4	; 0x04
    14b6:	35 81       	ldd	r19, Z+5	; 0x05
    14b8:	46 81       	ldd	r20, Z+6	; 0x06
    14ba:	57 81       	ldd	r21, Z+7	; 0x07
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	92 e1       	ldi	r25, 0x12	; 18
    14c0:	aa e7       	ldi	r26, 0x7A	; 122
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodsi4>
    14cc:	da 01       	movw	r26, r20
    14ce:	c9 01       	movw	r24, r18
    14d0:	80 51       	subi	r24, 0x10	; 16
    14d2:	86 95       	lsr	r24
    14d4:	89 83       	std	Y+1, r24	; 0x01
	TWCR=(1<<TWEN);//ENABLE BIT
    14d6:	e6 e5       	ldi	r30, 0x56	; 86
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	84 e0       	ldi	r24, 0x04	; 4
    14dc:	80 83       	st	Z, r24
	TWSR=0;   //SFRTO KOLO 3SHAN EL BA2Y READ ONLY
    14de:	e1 e2       	ldi	r30, 0x21	; 33
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	10 82       	st	Z, r1
	TWBR=twbr_value;
    14e4:	e0 e2       	ldi	r30, 0x20	; 32
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	80 83       	st	Z, r24
	TWAR=Config_Ptr->address;//A5ER BIT R/W;
    14ec:	22 e2       	ldi	r18, 0x22	; 34
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	a2 81       	ldd	r26, Z+2	; 0x02
    14fa:	b3 81       	ldd	r27, Z+3	; 0x03
    14fc:	f9 01       	movw	r30, r18
    14fe:	80 83       	st	Z, r24
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <TWI_start>:

void TWI_start(void)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1514:	e6 e5       	ldi	r30, 0x56	; 86
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	84 ea       	ldi	r24, 0xA4	; 164
    151a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    151c:	e6 e5       	ldi	r30, 0x56	; 86
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	88 23       	and	r24, r24
    1524:	dc f7       	brge	.-10     	; 0x151c <TWI_start+0x10>
}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <TWI_stop>:

void TWI_stop(void)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1534:	e6 e5       	ldi	r30, 0x56	; 86
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	84 e9       	ldi	r24, 0x94	; 148
    153a:	80 83       	st	Z, r24
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    154e:	e3 e2       	ldi	r30, 0x23	; 35
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1556:	e6 e5       	ldi	r30, 0x56	; 86
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	84 e8       	ldi	r24, 0x84	; 132
    155c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    155e:	e6 e5       	ldi	r30, 0x56	; 86
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	dc f7       	brge	.-10     	; 0x155e <TWI_writeByte+0x1c>
}
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1578:	e6 e5       	ldi	r30, 0x56	; 86
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	84 ec       	ldi	r24, 0xC4	; 196
    157e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1580:	e6 e5       	ldi	r30, 0x56	; 86
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	88 23       	and	r24, r24
    1588:	dc f7       	brge	.-10     	; 0x1580 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    158a:	e3 e2       	ldi	r30, 0x23	; 35
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    159e:	e6 e5       	ldi	r30, 0x56	; 86
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	84 e8       	ldi	r24, 0x84	; 132
    15a4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    15a6:	e6 e5       	ldi	r30, 0x56	; 86
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 23       	and	r24, r24
    15ae:	dc f7       	brge	.-10     	; 0x15a6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    15b0:	e3 e2       	ldi	r30, 0x23	; 35
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    15c6:	e1 e2       	ldi	r30, 0x21	; 33
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 7f       	andi	r24, 0xF8	; 248
    15ce:	89 83       	std	Y+1, r24	; 0x01
    return status;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <PWM_Timer0_Init>:
 *      Author: Ahmedmohamed
 */
#include "TIMER0.h"
#include <avr/io.h>
void PWM_Timer0_Init(uint8 set_duty_cycle)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    15e6:	e2 e5       	ldi	r30, 0x52	; 82
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    15ec:	ec e5       	ldi	r30, 0x5C	; 92
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	80 83       	st	Z, r24

	DDRB |=(1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    15f4:	a7 e3       	ldi	r26, 0x37	; 55
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e7 e3       	ldi	r30, 0x37	; 55
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	88 60       	ori	r24, 0x08	; 8
    1600:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1602:	e3 e5       	ldi	r30, 0x53	; 83
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8a e6       	ldi	r24, 0x6A	; 106
    1608:	80 83       	st	Z, r24
}
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <__vector_7>:
static volatile void (*A_callBackPtr)(void) = NULL_PTR;
static volatile void (*g_callBackPtrOvf)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	if(A_callBackPtr != NULL_PTR)
    163c:	80 91 86 00 	lds	r24, 0x0086
    1640:	90 91 87 00 	lds	r25, 0x0087
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_7+0x40>
	{
		(*A_callBackPtr)();
    1648:	e0 91 86 00 	lds	r30, 0x0086
    164c:	f0 91 87 00 	lds	r31, 0x0087
    1650:	09 95       	icall
	}
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	if(B_callBackPtr != NULL_PTR)
    16a2:	80 91 84 00 	lds	r24, 0x0084
    16a6:	90 91 85 00 	lds	r25, 0x0085
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <__vector_8+0x40>
	{
		(*B_callBackPtr)();
    16ae:	e0 91 84 00 	lds	r30, 0x0084
    16b2:	f0 91 85 00 	lds	r31, 0x0085
    16b6:	09 95       	icall
	}
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	if(B_callBackPtr != NULL_PTR)
    1708:	80 91 84 00 	lds	r24, 0x0084
    170c:	90 91 85 00 	lds	r25, 0x0085
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	29 f0       	breq	.+10     	; 0x171e <__vector_9+0x40>
	{
		(*g_callBackPtrOvf)();
    1714:	e0 91 88 00 	lds	r30, 0x0088
    1718:	f0 91 89 00 	lds	r31, 0x0089
    171c:	09 95       	icall
	}
}
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <Timer1_init+0x6>
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	8a 83       	std	Y+2, r24	; 0x02
	uint8 MODE=Config_Ptr->mode;
    1754:	ea 81       	ldd	r30, Y+2	; 0x02
    1756:	fb 81       	ldd	r31, Y+3	; 0x03
    1758:	85 81       	ldd	r24, Z+5	; 0x05
    175a:	89 83       	std	Y+1, r24	; 0x01
		TCNT1=(Config_Ptr->initial_value);
    175c:	ac e4       	ldi	r26, 0x4C	; 76
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ea 81       	ldd	r30, Y+2	; 0x02
    1762:	fb 81       	ldd	r31, Y+3	; 0x03
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	9c 93       	st	X, r25
    176c:	8e 93       	st	-X, r24
		TCCR1A|=(1<<FOC1A);
    176e:	af e4       	ldi	r26, 0x4F	; 79
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ef e4       	ldi	r30, 0x4F	; 79
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	88 60       	ori	r24, 0x08	; 8
    177a:	8c 93       	st	X, r24
		//TCCR1A=(1<<Config_Ptr->mode);
		//TCCR1B=(TCCR1B&0xE7)|((1<<Config_Ptr->mode)<<3);
		//TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);
		TCCR1B = (Config_Ptr->prescaler) | ((Config_Ptr->mode<<1)&0x08);
    177c:	ae e4       	ldi	r26, 0x4E	; 78
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ea 81       	ldd	r30, Y+2	; 0x02
    1782:	fb 81       	ldd	r31, Y+3	; 0x03
    1784:	84 81       	ldd	r24, Z+4	; 0x04
    1786:	28 2f       	mov	r18, r24
    1788:	ea 81       	ldd	r30, Y+2	; 0x02
    178a:	fb 81       	ldd	r31, Y+3	; 0x03
    178c:	85 81       	ldd	r24, Z+5	; 0x05
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 70       	andi	r24, 0x08	; 8
    1798:	82 2b       	or	r24, r18
    179a:	8c 93       	st	X, r24


	if(MODE==Normal)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	88 23       	and	r24, r24
    17a0:	41 f4       	brne	.+16     	; 0x17b2 <Timer1_init+0x6e>
		{
			TIMSK |= (1<<TOIE1);
    17a2:	a9 e5       	ldi	r26, 0x59	; 89
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e9 e5       	ldi	r30, 0x59	; 89
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	84 60       	ori	r24, 0x04	; 4
    17ae:	8c 93       	st	X, r24
    17b0:	13 c0       	rjmp	.+38     	; 0x17d8 <Timer1_init+0x94>
		}

	else if(MODE==ctc)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	81 f4       	brne	.+32     	; 0x17d8 <Timer1_init+0x94>
		{

			OCR1A=(Config_Ptr->compare_value);
    17b8:	aa e4       	ldi	r26, 0x4A	; 74
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ea 81       	ldd	r30, Y+2	; 0x02
    17be:	fb 81       	ldd	r31, Y+3	; 0x03
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	11 96       	adiw	r26, 0x01	; 1
    17c6:	9c 93       	st	X, r25
    17c8:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);
    17ca:	a9 e5       	ldi	r26, 0x59	; 89
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e9 e5       	ldi	r30, 0x59	; 89
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 61       	ori	r24, 0x10	; 16
    17d6:	8c 93       	st	X, r24
				TCCR1A=((1<<non_inverting)<<6);
			}


		}*/
}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <Timer1_deInit>:
void Timer1_deInit(void)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    17ec:	ef e4       	ldi	r30, 0x4F	; 79
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	10 82       	st	Z, r1
	TCCR1B = 0;
    17f2:	ee e4       	ldi	r30, 0x4E	; 78
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	10 82       	st	Z, r1
	TCNT1 = 0;
    17f8:	ec e4       	ldi	r30, 0x4C	; 76
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	11 82       	std	Z+1, r1	; 0x01
    17fe:	10 82       	st	Z, r1
	ICR1 = 0;
    1800:	e6 e4       	ldi	r30, 0x46	; 70
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	11 82       	std	Z+1, r1	; 0x01
    1806:	10 82       	st	Z, r1
	A_callBackPtr = NULL_PTR;
    1808:	10 92 87 00 	sts	0x0087, r1
    180c:	10 92 86 00 	sts	0x0086, r1
	B_callBackPtr = NULL_PTR;
    1810:	10 92 85 00 	sts	0x0085, r1
    1814:	10 92 84 00 	sts	0x0084, r1

}
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <Timer1_AsetCallBack>:
void Timer1_AsetCallBack(void(*a_ptr)(void))
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <Timer1_AsetCallBack+0x6>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
	A_callBackPtr = a_ptr;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	90 93 87 00 	sts	0x0087, r25
    1834:	80 93 86 00 	sts	0x0086, r24

}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <TIMER1_startCount>:
void TIMER1_startCount(Timer1_Prescaler prescaler)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= (1<<WGM12);
    184e:	ae e4       	ldi	r26, 0x4E	; 78
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ee e4       	ldi	r30, 0x4E	; 78
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	88 60       	ori	r24, 0x08	; 8
    185a:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0xF8)|(prescaler);
    185c:	ae e4       	ldi	r26, 0x4E	; 78
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ee e4       	ldi	r30, 0x4E	; 78
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	98 2f       	mov	r25, r24
    1868:	98 7f       	andi	r25, 0xF8	; 248
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	89 2b       	or	r24, r25
    186e:	8c 93       	st	X, r24

}
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <TIMER1_stopCount>:

void TIMER1_stopCount(void)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B =0;
    1880:	ee e4       	ldi	r30, 0x4E	; 78
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	10 82       	st	Z, r1
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <UART_init>:
#include<avr/io.h>
#include"common_macros.h"
#include"UART.h"
//uint8 counters=0;
void UART_init(const UART_ConfigType * Config_Ptr)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <UART_init+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <UART_init+0x8>
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	9c 83       	std	Y+4, r25	; 0x04
    189a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    189c:	1a 82       	std	Y+2, r1	; 0x02
    189e:	19 82       	std	Y+1, r1	; 0x01
	UCSRA=(1<<U2X);//DOUBLE TRANSMITION SPEED
    18a0:	eb e2       	ldi	r30, 0x2B	; 43
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);//TRANSMITTER ,RECIEVER ENABLED
    18a8:	ea e2       	ldi	r30, 0x2A	; 42
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	88 e1       	ldi	r24, 0x18	; 24
    18ae:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL) ;
    18b0:	e0 e4       	ldi	r30, 0x40	; 64
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 e8       	ldi	r24, 0x80	; 128
    18b6:	80 83       	st	Z, r24
	//LOW HAKTEB FEHA 7AGA //LOW 5LETO B ZERO H5AZEN FEL UBRRH


	//UBRRH=0;//DEH B ZERO 3SHAN H5AZEN FEL URSEL
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    18b8:	a0 e4       	ldi	r26, 0x40	; 64
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e0 e4       	ldi	r30, 0x40	; 64
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	28 2f       	mov	r18, r24
    18c4:	29 7f       	andi	r18, 0xF9	; 249
    18c6:	eb 81       	ldd	r30, Y+3	; 0x03
    18c8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ca:	80 81       	ld	r24, Z
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	82 2b       	or	r24, r18
    18d6:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    18d8:	a0 e4       	ldi	r26, 0x40	; 64
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e0 e4       	ldi	r30, 0x40	; 64
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	28 2f       	mov	r18, r24
    18e4:	2f 7c       	andi	r18, 0xCF	; 207
    18e6:	eb 81       	ldd	r30, Y+3	; 0x03
    18e8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	82 95       	swap	r24
    18f2:	92 95       	swap	r25
    18f4:	90 7f       	andi	r25, 0xF0	; 240
    18f6:	98 27       	eor	r25, r24
    18f8:	80 7f       	andi	r24, 0xF0	; 240
    18fa:	98 27       	eor	r25, r24
    18fc:	82 2b       	or	r24, r18
    18fe:	8c 93       	st	X, r24
	//UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<4);
	UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<4);
    1900:	a0 e4       	ldi	r26, 0x40	; 64
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e0 e4       	ldi	r30, 0x40	; 64
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	27 7f       	andi	r18, 0xF7	; 247
    190e:	eb 81       	ldd	r30, Y+3	; 0x03
    1910:	fc 81       	ldd	r31, Y+4	; 0x04
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	82 95       	swap	r24
    191a:	92 95       	swap	r25
    191c:	90 7f       	andi	r25, 0xF0	; 240
    191e:	98 27       	eor	r25, r24
    1920:	80 7f       	andi	r24, 0xF0	; 240
    1922:	98 27       	eor	r25, r24
    1924:	82 2b       	or	r24, r18
    1926:	8c 93       	st	X, r24
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1928:	eb 81       	ldd	r30, Y+3	; 0x03
    192a:	fc 81       	ldd	r31, Y+4	; 0x04
    192c:	83 81       	ldd	r24, Z+3	; 0x03
    192e:	94 81       	ldd	r25, Z+4	; 0x04
    1930:	a5 81       	ldd	r26, Z+5	; 0x05
    1932:	b6 81       	ldd	r27, Z+6	; 0x06
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	aa 1f       	adc	r26, r26
    193a:	bb 1f       	adc	r27, r27
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	aa 1f       	adc	r26, r26
    1942:	bb 1f       	adc	r27, r27
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	aa 1f       	adc	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	9c 01       	movw	r18, r24
    194e:	ad 01       	movw	r20, r26
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	92 e1       	ldi	r25, 0x12	; 18
    1954:	aa e7       	ldi	r26, 0x7A	; 122
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 8a 10 	call	0x2114	; 0x2114 <__udivmodsi4>
    1960:	da 01       	movw	r26, r20
    1962:	c9 01       	movw	r24, r18
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    196a:	e0 e4       	ldi	r30, 0x40	; 64
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	89 2f       	mov	r24, r25
    1974:	99 27       	eor	r25, r25
    1976:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1978:	e9 e2       	ldi	r30, 0x29	; 41
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	80 83       	st	Z, r24


}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <UART_Receive_Byte>:
uint8 UART_Receive_Byte(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1996:	eb e2       	ldi	r30, 0x2B	; 43
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	88 23       	and	r24, r24
    199e:	dc f7       	brge	.-10     	; 0x1996 <UART_Receive_Byte+0x8>
	return UDR;//clear rxc ,read data f bysafar el flag 3shan hwa read only
    19a0:	ec e2       	ldi	r30, 0x2C	; 44
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
}
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <UART_Send_Byte>:
void UART_Send_Byte(uint8 data)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));//1 when its empty
    19b8:	eb e2       	ldi	r30, 0x2B	; 43
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	80 72       	andi	r24, 0x20	; 32
    19c4:	90 70       	andi	r25, 0x00	; 0
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	b9 f3       	breq	.-18     	; 0x19b8 <UART_Send_Byte+0xc>
	UDR=data;
    19ca:	ec e2       	ldi	r30, 0x2C	; 44
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	80 83       	st	Z, r24
}
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <UART_Send_String>:
void UART_Send_String(uint8 *str)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <UART_Send_String+0x6>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	0a c0       	rjmp	.+20     	; 0x19fe <UART_Send_String+0x24>
	while(*str!='\0')
	{
		UART_Send_Byte(*str);
    19ea:	e9 81       	ldd	r30, Y+1	; 0x01
    19ec:	fa 81       	ldd	r31, Y+2	; 0x02
    19ee:	80 81       	ld	r24, Z
    19f0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UART_Send_Byte>
		str++;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));//1 when its empty
	UDR=data;
}
void UART_Send_String(uint8 *str)
{
	while(*str!='\0')
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	80 81       	ld	r24, Z
    1a04:	88 23       	and	r24, r24
    1a06:	89 f7       	brne	.-30     	; 0x19ea <UART_Send_String+0x10>
	{
		UART_Send_Byte(*str);
		str++;
	}
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <UART_Receive_String>:
void UART_Receive_String(uint8 *str)
{
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <UART_Receive_String+0xa>
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	9b 83       	std	Y+3, r25	; 0x03
    1a24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1a26:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Receive_Byte();
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	8c 01       	movw	r16, r24
    1a34:	02 0f       	add	r16, r18
    1a36:	13 1f       	adc	r17, r19
    1a38:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	80 83       	st	Z, r24
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <UART_Receive_String+0x4e>
	while(str[i]!='#')//my own NULL
	{
		i++;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Receive_Byte();
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	9b 81       	ldd	r25, Y+3	; 0x03
    1a52:	8c 01       	movw	r16, r24
    1a54:	02 0f       	add	r16, r18
    1a56:	13 1f       	adc	r17, r19
    1a58:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_Receive_Byte>
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	80 83       	st	Z, r24
}
void UART_Receive_String(uint8 *str)
{
	uint8 i=0;
	str[i]=UART_Receive_Byte();
	while(str[i]!='#')//my own NULL
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e2 0f       	add	r30, r18
    1a6e:	f3 1f       	adc	r31, r19
    1a70:	80 81       	ld	r24, Z
    1a72:	83 32       	cpi	r24, 0x23	; 35
    1a74:	31 f7       	brne	.-52     	; 0x1a42 <UART_Receive_String+0x30>
	{
		i++;
		str[i]=UART_Receive_Byte();
	}
	str[i]='\0';
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	fc 01       	movw	r30, r24
    1a82:	e2 0f       	add	r30, r18
    1a84:	f3 1f       	adc	r31, r19
    1a86:	10 82       	st	Z, r1
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret

00001a98 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_setupPinDirection+0x6>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <GPIO_setupPinDirection+0x8>
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	6a 83       	std	Y+2, r22	; 0x02
    1aaa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	88 30       	cpi	r24, 0x08	; 8
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <GPIO_setupPinDirection+0x1c>
    1ab2:	d5 c0       	rjmp	.+426    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <GPIO_setupPinDirection+0x24>
    1aba:	d1 c0       	rjmp	.+418    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3d 83       	std	Y+5, r19	; 0x05
    1ac4:	2c 83       	std	Y+4, r18	; 0x04
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <GPIO_setupPinDirection+0x3a>
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <GPIO_setupPinDirection+0xc0>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <GPIO_setupPinDirection+0x4e>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <GPIO_setupPinDirection+0x68>
    1ae4:	bc c0       	rjmp	.+376    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
    1ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_setupPinDirection+0x5a>
    1af0:	5f c0       	rjmp	.+190    	; 0x1bb0 <GPIO_setupPinDirection+0x118>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <GPIO_setupPinDirection+0x66>
    1afc:	85 c0       	rjmp	.+266    	; 0x1c08 <GPIO_setupPinDirection+0x170>
    1afe:	af c0       	rjmp	.+350    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b06:	aa e3       	ldi	r26, 0x3A	; 58
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ea e3       	ldi	r30, 0x3A	; 58
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_setupPinDirection+0x8c>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_setupPinDirection+0x88>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	98 c0       	rjmp	.+304    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b2e:	aa e3       	ldi	r26, 0x3A	; 58
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ea e3       	ldi	r30, 0x3A	; 58
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_setupPinDirection+0xb4>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_setupPinDirection+0xb0>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	83 c0       	rjmp	.+262    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	a1 f4       	brne	.+40     	; 0x1b86 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b5e:	a7 e3       	ldi	r26, 0x37	; 55
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e7 e3       	ldi	r30, 0x37	; 55
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GPIO_setupPinDirection+0xe4>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <GPIO_setupPinDirection+0xe0>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	6c c0       	rjmp	.+216    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b86:	a7 e3       	ldi	r26, 0x37	; 55
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e7 e3       	ldi	r30, 0x37	; 55
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_setupPinDirection+0x10c>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_setupPinDirection+0x108>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	57 c0       	rjmp	.+174    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	a1 f4       	brne	.+40     	; 0x1bde <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bb6:	a4 e3       	ldi	r26, 0x34	; 52
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e4 e3       	ldi	r30, 0x34	; 52
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_setupPinDirection+0x13c>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_setupPinDirection+0x138>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bde:	a4 e3       	ldi	r26, 0x34	; 52
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e4 e3       	ldi	r30, 0x34	; 52
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <GPIO_setupPinDirection+0x164>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <GPIO_setupPinDirection+0x160>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	2b c0       	rjmp	.+86     	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	a1 f4       	brne	.+40     	; 0x1c36 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c0e:	a1 e3       	ldi	r26, 0x31	; 49
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e1 e3       	ldi	r30, 0x31	; 49
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_setupPinDirection+0x194>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_setupPinDirection+0x190>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c36:	a1 e3       	ldi	r26, 0x31	; 49
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e1 e3       	ldi	r30, 0x31	; 49
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <GPIO_setupPinDirection+0x1bc>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <GPIO_setupPinDirection+0x1b8>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <GPIO_writePin+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_writePin+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02
    1c80:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	88 30       	cpi	r24, 0x08	; 8
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <GPIO_writePin+0x1c>
    1c88:	d5 c0       	rjmp	.+426    	; 0x1e34 <GPIO_writePin+0x1c6>
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <GPIO_writePin+0x24>
    1c90:	d1 c0       	rjmp	.+418    	; 0x1e34 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_writePin+0x3a>
    1ca6:	43 c0       	rjmp	.+134    	; 0x1d2e <GPIO_writePin+0xc0>
    1ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    1caa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <GPIO_writePin+0x4e>
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	71 f0       	breq	.+28     	; 0x1cd6 <GPIO_writePin+0x68>
    1cba:	bc c0       	rjmp	.+376    	; 0x1e34 <GPIO_writePin+0x1c6>
    1cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <GPIO_writePin+0x5a>
    1cc6:	5f c0       	rjmp	.+190    	; 0x1d86 <GPIO_writePin+0x118>
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	91 05       	cpc	r25, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <GPIO_writePin+0x66>
    1cd2:	85 c0       	rjmp	.+266    	; 0x1dde <GPIO_writePin+0x170>
    1cd4:	af c0       	rjmp	.+350    	; 0x1e34 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cdc:	ab e3       	ldi	r26, 0x3B	; 59
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_writePin+0x8c>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_writePin+0x88>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	98 c0       	rjmp	.+304    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d04:	ab e3       	ldi	r26, 0x3B	; 59
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	eb e3       	ldi	r30, 0x3B	; 59
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <GPIO_writePin+0xb4>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <GPIO_writePin+0xb0>
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	83 c0       	rjmp	.+262    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	a1 f4       	brne	.+40     	; 0x1d5c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d34:	a8 e3       	ldi	r26, 0x38	; 56
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <GPIO_writePin+0xe4>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <GPIO_writePin+0xe0>
    1d56:	84 2b       	or	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	6c c0       	rjmp	.+216    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d5c:	a8 e3       	ldi	r26, 0x38	; 56
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e8 e3       	ldi	r30, 0x38	; 56
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <GPIO_writePin+0x10c>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <GPIO_writePin+0x108>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	57 c0       	rjmp	.+174    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d8c:	a5 e3       	ldi	r26, 0x35	; 53
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e5 e3       	ldi	r30, 0x35	; 53
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <GPIO_writePin+0x13c>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <GPIO_writePin+0x138>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	40 c0       	rjmp	.+128    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1db4:	a5 e3       	ldi	r26, 0x35	; 53
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e5 e3       	ldi	r30, 0x35	; 53
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <GPIO_writePin+0x164>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <GPIO_writePin+0x160>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	2b c0       	rjmp	.+86     	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	a1 f4       	brne	.+40     	; 0x1e0c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1de4:	a2 e3       	ldi	r26, 0x32	; 50
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e2 e3       	ldi	r30, 0x32	; 50
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <GPIO_writePin+0x194>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <GPIO_writePin+0x190>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e0c:	a2 e3       	ldi	r26, 0x32	; 50
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e2 e3       	ldi	r30, 0x32	; 50
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <GPIO_writePin+0x1bc>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <GPIO_writePin+0x1b8>
    1e2e:	80 95       	com	r24
    1e30:	84 23       	and	r24, r20
    1e32:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <GPIO_readPin+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <GPIO_readPin+0x8>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e56:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <GPIO_readPin+0x1c>
    1e5e:	84 c0       	rjmp	.+264    	; 0x1f68 <GPIO_readPin+0x124>
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <GPIO_readPin+0x24>
    1e66:	80 c0       	rjmp	.+256    	; 0x1f68 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3d 83       	std	Y+5, r19	; 0x05
    1e70:	2c 83       	std	Y+4, r18	; 0x04
    1e72:	4c 81       	ldd	r20, Y+4	; 0x04
    1e74:	5d 81       	ldd	r21, Y+5	; 0x05
    1e76:	41 30       	cpi	r20, 0x01	; 1
    1e78:	51 05       	cpc	r21, r1
    1e7a:	79 f1       	breq	.+94     	; 0x1eda <GPIO_readPin+0x96>
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	91 05       	cpc	r25, r1
    1e84:	34 f4       	brge	.+12     	; 0x1e92 <GPIO_readPin+0x4e>
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	69 f0       	breq	.+26     	; 0x1eaa <GPIO_readPin+0x66>
    1e90:	6b c0       	rjmp	.+214    	; 0x1f68 <GPIO_readPin+0x124>
    1e92:	4c 81       	ldd	r20, Y+4	; 0x04
    1e94:	5d 81       	ldd	r21, Y+5	; 0x05
    1e96:	42 30       	cpi	r20, 0x02	; 2
    1e98:	51 05       	cpc	r21, r1
    1e9a:	b9 f1       	breq	.+110    	; 0x1f0a <GPIO_readPin+0xc6>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <GPIO_readPin+0x64>
    1ea6:	49 c0       	rjmp	.+146    	; 0x1f3a <GPIO_readPin+0xf6>
    1ea8:	5f c0       	rjmp	.+190    	; 0x1f68 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1eaa:	e9 e3       	ldi	r30, 0x39	; 57
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a9 01       	movw	r20, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_readPin+0x7e>
    1ebe:	55 95       	asr	r21
    1ec0:	47 95       	ror	r20
    1ec2:	8a 95       	dec	r24
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_readPin+0x7a>
    1ec6:	ca 01       	movw	r24, r20
    1ec8:	81 70       	andi	r24, 0x01	; 1
    1eca:	90 70       	andi	r25, 0x00	; 0
    1ecc:	88 23       	and	r24, r24
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	49 c0       	rjmp	.+146    	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ed6:	19 82       	std	Y+1, r1	; 0x01
    1ed8:	47 c0       	rjmp	.+142    	; 0x1f68 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1eda:	e6 e3       	ldi	r30, 0x36	; 54
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a9 01       	movw	r20, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <GPIO_readPin+0xae>
    1eee:	55 95       	asr	r21
    1ef0:	47 95       	ror	r20
    1ef2:	8a 95       	dec	r24
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <GPIO_readPin+0xaa>
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	90 70       	andi	r25, 0x00	; 0
    1efc:	88 23       	and	r24, r24
    1efe:	19 f0       	breq	.+6      	; 0x1f06 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	31 c0       	rjmp	.+98     	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	2f c0       	rjmp	.+94     	; 0x1f68 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f0a:	e3 e3       	ldi	r30, 0x33	; 51
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <GPIO_readPin+0xde>
    1f1e:	55 95       	asr	r21
    1f20:	47 95       	ror	r20
    1f22:	8a 95       	dec	r24
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <GPIO_readPin+0xda>
    1f26:	ca 01       	movw	r24, r20
    1f28:	81 70       	andi	r24, 0x01	; 1
    1f2a:	90 70       	andi	r25, 0x00	; 0
    1f2c:	88 23       	and	r24, r24
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	19 c0       	rjmp	.+50     	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f36:	19 82       	std	Y+1, r1	; 0x01
    1f38:	17 c0       	rjmp	.+46     	; 0x1f68 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f3a:	e0 e3       	ldi	r30, 0x30	; 48
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_readPin+0x10e>
    1f4e:	55 95       	asr	r21
    1f50:	47 95       	ror	r20
    1f52:	8a 95       	dec	r24
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_readPin+0x10a>
    1f56:	ca 01       	movw	r24, r20
    1f58:	81 70       	andi	r24, 0x01	; 1
    1f5a:	90 70       	andi	r25, 0x00	; 0
    1f5c:	88 23       	and	r24, r24
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f66:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <GPIO_setupPortDirection+0x6>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <GPIO_setupPortDirection+0x8>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	84 30       	cpi	r24, 0x04	; 4
    1f8e:	90 f5       	brcc	.+100    	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	3c 83       	std	Y+4, r19	; 0x04
    1f98:	2b 83       	std	Y+3, r18	; 0x03
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	d1 f0       	breq	.+52     	; 0x1fd8 <GPIO_setupPortDirection+0x5e>
    1fa4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa8:	22 30       	cpi	r18, 0x02	; 2
    1faa:	31 05       	cpc	r19, r1
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <GPIO_setupPortDirection+0x3e>
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <GPIO_setupPortDirection+0x54>
    1fb6:	1e c0       	rjmp	.+60     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <GPIO_setupPortDirection+0x68>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	91 05       	cpc	r25, r1
    1fca:	81 f0       	breq	.+32     	; 0x1fec <GPIO_setupPortDirection+0x72>
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fce:	ea e3       	ldi	r30, 0x3A	; 58
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	80 83       	st	Z, r24
    1fd6:	0e c0       	rjmp	.+28     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fd8:	e7 e3       	ldi	r30, 0x37	; 55
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	80 83       	st	Z, r24
    1fe0:	09 c0       	rjmp	.+18     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fe2:	e4 e3       	ldi	r30, 0x34	; 52
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	80 83       	st	Z, r24
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fec:	e1 e3       	ldi	r30, 0x31	; 49
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_writePort+0x6>
    2008:	00 d0       	rcall	.+0      	; 0x200a <GPIO_writePort+0x8>
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	84 30       	cpi	r24, 0x04	; 4
    2016:	90 f5       	brcc	.+100    	; 0x207c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	3c 83       	std	Y+4, r19	; 0x04
    2020:	2b 83       	std	Y+3, r18	; 0x03
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	81 30       	cpi	r24, 0x01	; 1
    2028:	91 05       	cpc	r25, r1
    202a:	d1 f0       	breq	.+52     	; 0x2060 <GPIO_writePort+0x5e>
    202c:	2b 81       	ldd	r18, Y+3	; 0x03
    202e:	3c 81       	ldd	r19, Y+4	; 0x04
    2030:	22 30       	cpi	r18, 0x02	; 2
    2032:	31 05       	cpc	r19, r1
    2034:	2c f4       	brge	.+10     	; 0x2040 <GPIO_writePort+0x3e>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	61 f0       	breq	.+24     	; 0x2056 <GPIO_writePort+0x54>
    203e:	1e c0       	rjmp	.+60     	; 0x207c <GPIO_writePort+0x7a>
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	31 05       	cpc	r19, r1
    2048:	81 f0       	breq	.+32     	; 0x206a <GPIO_writePort+0x68>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	91 05       	cpc	r25, r1
    2052:	81 f0       	breq	.+32     	; 0x2074 <GPIO_writePort+0x72>
    2054:	13 c0       	rjmp	.+38     	; 0x207c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2056:	eb e3       	ldi	r30, 0x3B	; 59
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
    205e:	0e c0       	rjmp	.+28     	; 0x207c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2060:	e8 e3       	ldi	r30, 0x38	; 56
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	80 83       	st	Z, r24
    2068:	09 c0       	rjmp	.+18     	; 0x207c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    206a:	e5 e3       	ldi	r30, 0x35	; 53
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	80 83       	st	Z, r24
    2072:	04 c0       	rjmp	.+8      	; 0x207c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2074:	e2 e3       	ldi	r30, 0x32	; 50
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	80 83       	st	Z, r24
			break;
		}
	}
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <GPIO_readPort+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <GPIO_readPort+0x8>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2098:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	90 f5       	brcc	.+100    	; 0x2104 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3c 83       	std	Y+4, r19	; 0x04
    20a8:	2b 83       	std	Y+3, r18	; 0x03
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	d1 f0       	breq	.+52     	; 0x20e8 <GPIO_readPort+0x5e>
    20b4:	2b 81       	ldd	r18, Y+3	; 0x03
    20b6:	3c 81       	ldd	r19, Y+4	; 0x04
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <GPIO_readPort+0x3e>
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	61 f0       	breq	.+24     	; 0x20de <GPIO_readPort+0x54>
    20c6:	1e c0       	rjmp	.+60     	; 0x2104 <GPIO_readPort+0x7a>
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	81 f0       	breq	.+32     	; 0x20f2 <GPIO_readPort+0x68>
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	81 f0       	breq	.+32     	; 0x20fc <GPIO_readPort+0x72>
    20dc:	13 c0       	rjmp	.+38     	; 0x2104 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20de:	e9 e3       	ldi	r30, 0x39	; 57
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	0e c0       	rjmp	.+28     	; 0x2104 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20e8:	e6 e3       	ldi	r30, 0x36	; 54
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	09 c0       	rjmp	.+18     	; 0x2104 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20f2:	e3 e3       	ldi	r30, 0x33	; 51
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20fc:	e0 e3       	ldi	r30, 0x30	; 48
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <__udivmodsi4>:
    2114:	a1 e2       	ldi	r26, 0x21	; 33
    2116:	1a 2e       	mov	r1, r26
    2118:	aa 1b       	sub	r26, r26
    211a:	bb 1b       	sub	r27, r27
    211c:	fd 01       	movw	r30, r26
    211e:	0d c0       	rjmp	.+26     	; 0x213a <__udivmodsi4_ep>

00002120 <__udivmodsi4_loop>:
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	ee 1f       	adc	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	a2 17       	cp	r26, r18
    212a:	b3 07       	cpc	r27, r19
    212c:	e4 07       	cpc	r30, r20
    212e:	f5 07       	cpc	r31, r21
    2130:	20 f0       	brcs	.+8      	; 0x213a <__udivmodsi4_ep>
    2132:	a2 1b       	sub	r26, r18
    2134:	b3 0b       	sbc	r27, r19
    2136:	e4 0b       	sbc	r30, r20
    2138:	f5 0b       	sbc	r31, r21

0000213a <__udivmodsi4_ep>:
    213a:	66 1f       	adc	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	1a 94       	dec	r1
    2144:	69 f7       	brne	.-38     	; 0x2120 <__udivmodsi4_loop>
    2146:	60 95       	com	r22
    2148:	70 95       	com	r23
    214a:	80 95       	com	r24
    214c:	90 95       	com	r25
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	bd 01       	movw	r22, r26
    2154:	cf 01       	movw	r24, r30
    2156:	08 95       	ret

00002158 <__prologue_saves__>:
    2158:	2f 92       	push	r2
    215a:	3f 92       	push	r3
    215c:	4f 92       	push	r4
    215e:	5f 92       	push	r5
    2160:	6f 92       	push	r6
    2162:	7f 92       	push	r7
    2164:	8f 92       	push	r8
    2166:	9f 92       	push	r9
    2168:	af 92       	push	r10
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	ca 1b       	sub	r28, r26
    2182:	db 0b       	sbc	r29, r27
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	09 94       	ijmp

00002190 <__epilogue_restores__>:
    2190:	2a 88       	ldd	r2, Y+18	; 0x12
    2192:	39 88       	ldd	r3, Y+17	; 0x11
    2194:	48 88       	ldd	r4, Y+16	; 0x10
    2196:	5f 84       	ldd	r5, Y+15	; 0x0f
    2198:	6e 84       	ldd	r6, Y+14	; 0x0e
    219a:	7d 84       	ldd	r7, Y+13	; 0x0d
    219c:	8c 84       	ldd	r8, Y+12	; 0x0c
    219e:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a2:	b9 84       	ldd	r11, Y+9	; 0x09
    21a4:	c8 84       	ldd	r12, Y+8	; 0x08
    21a6:	df 80       	ldd	r13, Y+7	; 0x07
    21a8:	ee 80       	ldd	r14, Y+6	; 0x06
    21aa:	fd 80       	ldd	r15, Y+5	; 0x05
    21ac:	0c 81       	ldd	r16, Y+4	; 0x04
    21ae:	1b 81       	ldd	r17, Y+3	; 0x03
    21b0:	aa 81       	ldd	r26, Y+2	; 0x02
    21b2:	b9 81       	ldd	r27, Y+1	; 0x01
    21b4:	ce 0f       	add	r28, r30
    21b6:	d1 1d       	adc	r29, r1
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	ed 01       	movw	r28, r26
    21c4:	08 95       	ret

000021c6 <_exit>:
    21c6:	f8 94       	cli

000021c8 <__stop_program>:
    21c8:	ff cf       	rjmp	.-2      	; 0x21c8 <__stop_program>
